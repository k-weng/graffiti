[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nDate = Package['es5-shim'].Date;\nparseInt = Package['es5-shim'].parseInt;\nECMAScript = Package.ecmascript.ECMAScript;\nRouter = Package['iron:router'].Router;\nRouteController = Package['iron:router'].RouteController;\n_ = Package.underscore._;\nAccountsTemplates = Package['useraccounts:core'].AccountsTemplates;\nMeteor = Package.meteor.Meteor;\nWebApp = Package.webapp.WebApp;\nmain = Package.webapp.main;\nWebAppInternals = Package.webapp.WebAppInternals;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nbabelHelpers = Package['babel-runtime'].babelHelpers;\nSymbol = Package['ecmascript-runtime'].Symbol;\nMap = Package['ecmascript-runtime'].Map;\nSet = Package['ecmascript-runtime'].Set;\nPromise = Package.promise.Promise;\nIron = Package['iron:core'].Iron;\nAccounts = Package['accounts-base'].Accounts;\nAccountsServer = Package['accounts-base'].AccountsServer;\nT9n = Package['softwarerero:accounts-t9n'].T9n;\nAutoupdate = Package.autoupdate.Autoupdate;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/packages/global-imports.js"},{"type":"js","data":"(function(){\n\n/////////////////////////////////////////////////////////////////////////\n//                                                                     //\n// lib/collections/groups.js                                           //\n//                                                                     //\n/////////////////////////////////////////////////////////////////////////\n                                                                       //\nGroups = new Mongo.Collection('groups');                               // 1\n                                                                       //\nGroups.allow({                                                         // 3\n\tinsert: function (userId, doc) {                                      // 4\n\t\treturn !!userId;                                                     // 5\n\t}                                                                     //\n});                                                                    //\n                                                                       //\nMeteor.methods({                                                       // 9\n\taddUser: function (newUser, specificGroup) {                          // 10\n\t\tGroups.update({ _id: specificGroup }, { $push: { people: newUser } });\n\t\tSession.set('addUserMessages', \"User is added\");                     // 12\n\t},                                                                    //\n\tdeleteGroup: function (specificGroup) {                               // 14\n\t\tGroups.remove(specificGroup);                                        // 15\n\t},                                                                    //\n\tquitGroup: function (specificGroup) {                                 // 17\n\t\tGroups.update({ _id: specificGroup }, { $pull: { people: Meteor.user().username } });\n\t}                                                                     //\n});                                                                    //\n/////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n","servePath":"/lib/collections/groups.js","sourceMap":{"version":3,"sources":["meteor://ðŸ’»app/lib/collections/groups.js"],"names":[],"mappings":";;;;;;;;AAAA,MAAM,GAAG,IAAI,KAAK,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;;AAExC,MAAM,CAAC,KAAK,CAAC;AACZ,OAAM,EAAE,UAAS,MAAM,EAAE,GAAG,EAAC;AAC5B,SAAO,CAAC,CAAE,MAAM,CAAC;EACjB;CACD,CAAC,CAAC;;AAEH,MAAM,CAAC,OAAO,CAAC;AACd,QAAO,EAAE,UAAU,OAAO,EAAE,aAAa,EAAE;AAC1C,QAAM,CAAC,MAAM,CAAC,EAAC,GAAG,EAAE,aAAa,EAAC,EAAE,EAAC,KAAK,EAAE,EAAC,MAAM,EAAE,OAAO,EAAC,EAAC,CAAC,CAAC;AAChE,SAAO,CAAC,GAAG,CAAC,iBAAiB,EAAE,eAAe,CAAC,CAAC;EAChD;AACD,YAAW,EAAE,UAAU,aAAa,EAAE;AACrC,QAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;EAC7B;AACD,UAAS,EAAE,UAAU,aAAa,EAAE;AACnC,QAAM,CAAC,MAAM,CAAC,EAAC,GAAG,EAAE,aAAa,EAAC,EAAE,EAAC,KAAK,EAAE,EAAC,MAAM,EAAE,MAAM,CAAC,IAAI,EAAE,CAAC,QAAQ,EAAC,EAAC,CAAC,CAAC;EAC/E;CACD,CAAC,CAAC,sE","file":"/lib/collections/groups.js","sourcesContent":["Groups = new Mongo.Collection('groups');\n\nGroups.allow({\n\tinsert: function(userId, doc){\n\t\treturn !! userId;\n\t}\n});\n\nMeteor.methods({\n\taddUser: function (newUser, specificGroup) {\n\t\tGroups.update({_id: specificGroup}, {$push: {people: newUser}});\n\t\tSession.set('addUserMessages', \"User is added\");\n\t},\n\tdeleteGroup: function (specificGroup) {\n\t\tGroups.remove(specificGroup);\n\t},\n\tquitGroup: function (specificGroup) {\n\t\tGroups.update({_id: specificGroup}, {$pull: {people: Meteor.user().username}});\n\t}\n});\n\n"]}},{"type":"js","data":"(function(){\n\n/////////////////////////////////////////////////////////////////////////\n//                                                                     //\n// lib/collections/messages.js                                         //\n//                                                                     //\n/////////////////////////////////////////////////////////////////////////\n                                                                       //\nMessages = new Mongo.Collection('messages');                           // 1\n                                                                       //\nMessages.allow({                                                       // 3\n\tinsert: function (userId, doc) {                                      // 4\n\t\treturn !!userId;                                                     // 5\n\t}                                                                     //\n});                                                                    //\n                                                                       //\nMeteor.methods({                                                       // 9\n                                                                       //\n\t// messageSend: function(message){                                    //\n\t// \tvar maxLife = (1)*(5)*(1000);                                     //\n\t// \tvar newMsg = _.extend(message,{                                   //\n\t// \t\tuderID: Meteor.user()._id,                                       //\n\t// \t\tusername: Meteor.user().username,                                //\n\t// \t\tvotes:0,                                                         //\n\t// \t\t// radius:linearScale(message.text.length()),                    //\n\t// \t\tlife: maxLife,                                                   //\n\t// \t\tvoters:[]                                                        //\n\t// \t\t// groupName: Groups.find({_id:message.groupId})                 //\n\t// \t});                                                               //\n\t// \tvar id = Messages.insert(newMsg);                                 //\n\t// \treturn {_id: id};                                                 //\n\t// }                                                                  //\n                                                                       //\n});                                                                    //\n/////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n","servePath":"/lib/collections/messages.js","sourceMap":{"version":3,"sources":["meteor://ðŸ’»app/lib/collections/messages.js"],"names":[],"mappings":";;;;;;;;AAAA,QAAQ,GAAG,IAAI,KAAK,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;;AAE5C,QAAQ,CAAC,KAAK,CAAC;AACd,OAAM,EAAE,UAAS,MAAM,EAAE,GAAG,EAAC;AAC5B,SAAO,CAAC,CAAE,MAAM,CAAC;EACjB;CACD,CAAC,CAAC;;AAEH,MAAM,CAAC,OAAO,CAAC;;;;;;;;;;;;;;;;;CAiBd,CAAC,CAAC,sE","file":"/lib/collections/messages.js","sourcesContent":["Messages = new Mongo.Collection('messages');\n\nMessages.allow({\n\tinsert: function(userId, doc){\n\t\treturn !! userId;\n\t}\n});\n\nMeteor.methods({\n\t\n\t// messageSend: function(message){\n\t// \tvar maxLife = (1)*(5)*(1000);\n\t// \tvar newMsg = _.extend(message,{\n\t// \t\tuderID: Meteor.user()._id,\n\t// \t\tusername: Meteor.user().username,\n\t// \t\tvotes:0,\n\t// \t\t// radius:linearScale(message.text.length()),\n\t// \t\tlife: maxLife,\n\t// \t\tvoters:[]\n\t// \t\t// groupName: Groups.find({_id:message.groupId})\n\t// \t});\n\t// \tvar id = Messages.insert(newMsg);\n\t// \treturn {_id: id};\n\t// }\n\t\n});"]}},{"type":"js","data":"(function(){\n\n/////////////////////////////////////////////////////////////////////////\n//                                                                     //\n// lib/collections/users.js                                            //\n//                                                                     //\n/////////////////////////////////////////////////////////////////////////\n                                                                       //\nMeteor.users.deny({                                                    // 1\n  update: function () {                                                // 2\n    return true;                                                       // 3\n  }                                                                    //\n});                                                                    //\n/////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n","servePath":"/lib/collections/users.js","sourceMap":{"version":3,"sources":["meteor://ðŸ’»app/lib/collections/users.js"],"names":[],"mappings":";;;;;;;;AAAA,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC;AAChB,QAAM,EAAE,YAAW;AACjB,WAAO,IAAI,CAAC;GACb;CACF,CAAC,CAAC,sE","file":"/lib/collections/users.js","sourcesContent":["Meteor.users.deny({\n  update: function() {\n    return true;\n  }\n});"]}},{"type":"js","data":"(function(){\n\n/////////////////////////////////////////////////////////////////////////\n//                                                                     //\n// lib/useraccount_config.js                                           //\n//                                                                     //\n/////////////////////////////////////////////////////////////////////////\n                                                                       //\n                                                                       //\n// Options                                                             //\nAccountsTemplates.configure({                                          // 3\n  // defaultLayout: 'emptyLayout',                                     //\n  //showForgotPasswordLink: true,                                      //\n  overrideLoginErrors: true,                                           // 6\n  //enablePasswordChange: true,                                        //\n                                                                       //\n  // sendVerificationEmail: true,                                      //\n  // enforceEmailVerification: true,                                   //\n  //confirmPassword: true,                                             //\n  //continuousValidation: false,                                       //\n  //displayFormLabels: true,                                           //\n  //forbidClientAccountCreation: true,                                 //\n  //formValidationFeedback: true,                                      //\n  homeRoutePath: '/',                                                  // 16\n  //showAddRemoveServices: false,                                      //\n  //showPlaceholders: true,                                            //\n                                                                       //\n  negativeValidation: true,                                            // 20\n  positiveValidation: true,                                            // 21\n  negativeFeedback: false,                                             // 22\n  positiveFeedback: true                                               // 23\n                                                                       //\n});                                                                    //\n                                                                       //\n// Privacy Policy and Terms of Use                                     //\n//privacyUrl: 'privacy',                                               //\n//termsUrl: 'terms-of-use',                                            //\nvar pwd = AccountsTemplates.removeField('password');                   // 30\nAccountsTemplates.removeField('email');                                // 31\nAccountsTemplates.addFields([{                                         // 32\n  _id: \"username\",                                                     // 34\n  type: \"text\",                                                        // 35\n  displayName: \"username\",                                             // 36\n  required: true,                                                      // 37\n  minLength: 5                                                         // 38\n}, pwd]);                                                              //\n/////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n","servePath":"/lib/useraccount_config.js","sourceMap":{"version":3,"sources":["meteor://ðŸ’»app/lib/useraccount_config.js"],"names":[],"mappings":";;;;;;;;;;AAEA,iBAAiB,CAAC,SAAS,CAAC;;;AAG1B,qBAAmB,EAAE,IAAI;;;;;;;;;;AAUzB,eAAa,EAAE,GAAG;;;;AAIlB,oBAAkB,EAAE,IAAI;AACxB,oBAAkB,EAAE,IAAI;AACxB,kBAAgB,EAAE,KAAK;AACvB,kBAAgB,EAAE,IAAI;;CAKvB,CAAC,CAAC;;;;;AAEH,IAAI,GAAG,GAAG,iBAAiB,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;AACpD,iBAAiB,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;AACvC,iBAAiB,CAAC,SAAS,CAAC,CAC1B;AACI,KAAG,EAAE,UAAU;AACf,MAAI,EAAE,MAAM;AACZ,aAAW,EAAE,UAAU;AACvB,UAAQ,EAAE,IAAI;AACd,WAAS,EAAE,CAAC;CACf,EACD,GAAG,CACJ,CAAC,CAAC,gE","file":"/lib/useraccount_config.js","sourcesContent":["\n// Options\nAccountsTemplates.configure({\n  // defaultLayout: 'emptyLayout',\n  //showForgotPasswordLink: true,\n  overrideLoginErrors: true,\n  //enablePasswordChange: true,\n\n  // sendVerificationEmail: true,\n  // enforceEmailVerification: true,\n  //confirmPassword: true,\n  //continuousValidation: false,\n  //displayFormLabels: true,\n  //forbidClientAccountCreation: true,\n  //formValidationFeedback: true,\n  homeRoutePath: '/',\n  //showAddRemoveServices: false,\n  //showPlaceholders: true,\n\n  negativeValidation: true,\n  positiveValidation: true,\n  negativeFeedback: false,\n  positiveFeedback: true,\n\n  // Privacy Policy and Terms of Use\n  //privacyUrl: 'privacy',\n  //termsUrl: 'terms-of-use',\n});\n\nvar pwd = AccountsTemplates.removeField('password');\nAccountsTemplates.removeField('email');\nAccountsTemplates.addFields([\n  {\n      _id: \"username\",\n      type: \"text\",\n      displayName: \"username\",\n      required: true,\n      minLength: 5,\n  },\n  pwd\n]);"]}},{"type":"js","data":"(function(){\n\n/////////////////////////////////////////////////////////////////////////\n//                                                                     //\n// server/publications.js                                              //\n//                                                                     //\n/////////////////////////////////////////////////////////////////////////\n                                                                       //\nMeteor.publish('groups', function () {                                 // 1\n\treturn Groups.find();                                                 // 2\n});                                                                    //\n                                                                       //\nMeteor.publish('messages', function (group) {                          // 5\n\tconsole.log(\"publications **** \" + group);                            // 6\n\tvar weight = 15 * 60 * 1000;                                          // 7\n\tvar maxLife = 5 * 60 * 1000;                                          // 8\n\t// Messages.aggregate(                                                //\n\t// [{$project:                                                        //\n\t// \t{                                                                 //\n\t// \t\tlife:{$add: [\"$life\", [{ $multiply: [\"$votes\", (-15)*(60)*(1000)]} ] ]}\n\t// \t}                                                                 //\n\t// }                                                                  //\n\t// ]);                                                                //\n\tMessages.find().forEach(function (data) {                             // 16\n\t\t// console.log(maxLife - (Date.now()-data.timestamp));               //\n\t\tvar now = Date.now();                                                // 18\n\t\tMessages.update({ _id: data._id }, { $set: { life: maxLife - (now - data.timestamp) + weight * data.votes }\n\t\t});                                                                  //\n\t});                                                                   //\n                                                                       //\n\tMessages.remove({ life: { $lt: 0 } });                                // 24\n                                                                       //\n\treturn Messages.find({ groupId: group }, { life: { $gt: 0 } });       // 26\n});                                                                    //\n                                                                       //\n//Meteor.publish(\"allUsers\", function () {                             //\n//  return Meteor.users.find({});                                      //\n//});                                                                  //\n/////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n","servePath":"/server/publications.js","sourceMap":{"version":3,"sources":["meteor://ðŸ’»app/server/publications.js"],"names":[],"mappings":";;;;;;;;AAAA,MAAM,CAAC,OAAO,CAAC,QAAQ,EAAC,YAAU;AACjC,QAAO,MAAM,CAAC,IAAI,EAAE,CAAC;CACrB,CAAC,CAAC;;AAEH,MAAM,CAAC,OAAO,CAAC,UAAU,EAAC,UAAS,KAAK,EAAC;AACxC,QAAO,CAAC,GAAG,CAAC,oBAAoB,GAAG,KAAK,CAAC,CAAC;AAC1C,KAAI,MAAM,GAAI,EAAE,GAAG,EAAG,GAAE,IAAK,CAAC;AAC9B,KAAI,OAAO,GAAI,CAAC,GAAG,EAAG,GAAE,IAAK,CAAC;;;;;;;;AAQ9B,SAAQ,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC,UAAS,IAAI,EAAC;;AAErC,MAAI,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;AACrB,UAAQ,CAAC,MAAM,CAAC,EAAC,GAAG,EAAC,IAAI,CAAC,GAAG,EAAC,EAC7B,EAAC,IAAI,EAAC,EAAC,IAAI,EAAE,OAAO,IAAI,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,MAAM,GAAC,IAAI,CAAC,KAAK,EAAE;GACnE,CAAC,CAAC;EACH,CAAC,CAAC;;AAEH,SAAQ,CAAC,MAAM,CAAC,EAAC,IAAI,EAAC,EAAC,GAAG,EAAC,CAAC,EAAC,EAAC,CAAC,CAAC;;AAEhC,QAAO,QAAQ,CAAC,IAAI,CAAC,EAAC,OAAO,EAAC,KAAK,EAAC,EAAC,EAAC,IAAI,EAAC,EAAC,GAAG,EAAC,CAAC,EAAC,EAAC,CAAC,CAAC;CACrD,CAAC,CAAC","file":"/server/publications.js","sourcesContent":["Meteor.publish('groups',function(){\n\treturn Groups.find();\n});\n\nMeteor.publish('messages',function(group){\n\tconsole.log(\"publications **** \" + group);\n\tvar weight = (15)*(60)*(1000);\n\tvar maxLife = (5)*(60)*(1000);\n\t// Messages.aggregate(\n\t// [{$project:\n\t// \t{\n\t// \t\tlife:{$add: [\"$life\", [{ $multiply: [\"$votes\", (-15)*(60)*(1000)]} ] ]}\n\t// \t}\n\t// }\n\t// ]);\n\tMessages.find().forEach(function(data){\n\t\t// console.log(maxLife - (Date.now()-data.timestamp));\n\t\tvar now = Date.now();\n\t\tMessages.update({_id:data._id},\n\t\t\t{$set:{life: maxLife - (now - data.timestamp) + weight*data.votes }\n\t\t});\n\t});\n\n\tMessages.remove({life:{$lt:0}});\n\n\treturn Messages.find({groupId:group},{life:{$gt:0}});\n});\n\n//Meteor.publish(\"allUsers\", function () {\n//  return Meteor.users.find({});\n//});\n"]}},{"type":"js","data":"(function(){\n\n/////////////////////////////////////////////////////////////////////////\n//                                                                     //\n// server/serverSide.js                                                //\n//                                                                     //\n/////////////////////////////////////////////////////////////////////////\n                                                                       //\nif (Groups.find().count() == 0) {                                      // 1\n\tGroups.insert({ name: \"PublicGroup\", people: [], pubGroup: true });   // 2\n\tGroups.insert({ name: \"SecondGroup\", people: [], pubGroup: true });   // 3\n}                                                                      //\n                                                                       //\nMeteor.methods({                                                       // 6\n\tdoesUserExist: function (userName) {                                  // 7\n\t\tconsole.log(\"doesUserExist is being called.\");                       // 8\n\t\tconsole.log(\"The return for the method is \" + Meteor.users.find({ username: userName }).count());\n\t\treturn Meteor.users.find({ username: userName }).count();            // 10\n\t},                                                                    //\n                                                                       //\n\tmessageSend: function (message) {                                     // 13\n\t\tvar maxLife = 5 * 60 * 1000;                                         // 14\n\t\tvar newMsg = _.extend(message, {                                     // 15\n\t\t\tuderID: Meteor.user()._id,                                          // 16\n\t\t\tusername: Meteor.user().username,                                   // 17\n\t\t\tvotes: 0,                                                           // 18\n\t\t\tlife: maxLife,                                                      // 19\n\t\t\t// radius:linearScale(message.text.length()),                       //\n\t\t\tvoters: []                                                          // 21\n\t\t\t// groupName: Groups.find({_id:message.groupId})                    //\n\t\t});                                                                  //\n\t\tvar id = Messages.insert(newMsg);                                    // 24\n\t\treturn { _id: id };                                                  // 25\n\t},                                                                    //\n                                                                       //\n\tmessageVote: function (msgId, user) {                                 // 28\n\t\t// console.log(Messages.find({id:msgId}));                           //\n\t\tvar weight = 15 * 60 * 1000;                                         // 30\n\t\tvar maxLife = 5 * 60 * 1000;                                         // 31\n\t\tvar now = Date.now();                                                // 32\n\t\tconsole.log('messageVote');                                          // 33\n\t\tconsole.log(msgId);                                                  // 34\n\t\tvar username = user.username;                                        // 35\n\t\t// console.log()                                                     //\n\t\tif (Messages.find({ _id: msgId, voters: username }).count() === 0) {\n\t\t\tMessages.find({ _id: msgId }).forEach(function (data) {             // 38\n\t\t\t\tconsole.log(maxLife - (Date.now() - data.timestamp));              // 39\n\t\t\t\tvar now = Date.now();                                              // 40\n\t\t\t\tMessages.update({ _id: data._id }, {                               // 41\n\t\t\t\t\t$inc: { votes: 1 },                                               // 43\n\t\t\t\t\t$set: { life: maxLife - (now - data.timestamp) + weight * data.votes },\n\t\t\t\t\t$push: { voters: username }                                       // 45\n\t\t\t\t});                                                                //\n\t\t\t});                                                                 //\n\t\t} else {                                                             //\n\t\t\tconsole.log(\"already\");                                             // 49\n\t\t\tMessages.find({ _id: msgId }).forEach(function (data) {             // 50\n\t\t\t\tvar now = Date.now();                                              // 51\n\t\t\t\tMessages.update({ _id: data._id }, {                               // 52\n\t\t\t\t\t$inc: { votes: -1 },                                              // 54\n\t\t\t\t\t$pull: { voters: username },                                      // 55\n\t\t\t\t\t$set: { life: maxLife - (now - data.timestamp) + weight * (data.votes - 1) }\n\t\t\t\t});                                                                //\n\t\t\t});                                                                 //\n\t\t}                                                                    //\n\t\t// console.log(Messages.find({id:msgId}));                           //\n\t}                                                                     //\n});                                                                    //\n                                                                       //\n// if (Messages.find().count() == 0){                                  //\n// \tMessages.insert({name: \"chris\",                                    //\n// \ttext: \"test\",                                                      //\n// \t});                                                                //\n// }                                                                   //\n// if (Messages.find().count() == 0){                                  //\n// \tvar message = {                                                    //\n// \t\t\ttext: \"root\",                                                    //\n// \t\t\ttimestamp: Date.now(),                                           //\n// \t\t\tgroupName: \"PublicGroup\",                                        //\n// \t\t\ttransparency: 1                                                  //\n// \t};                                                                 //\n// \tMessages.insert(message);                                          //\n// }                                                                   //\n//an attempt to change opacity dynamically                             //\n// var maxLife = 30000;                                                //\n// var interval = 5000;                                                //\n// Meteor.setInterval(function(){                                      //\n// \tMessages.updateMany({                                              //\n// \t\t{},                                                               //\n// \t\t{                                                                 //\n// \t\t\t$set:{life: 1}                                                   //\n// \t\t}                                                                 //\n// \t});                                                                //\n// \t// var timeNow = Date.now()                                        //\n// \t// var msgs = Messages.find().map(function(u){                     //\n// \t// \treturn Math.round(maxLife - ((timeNow - u.timestamp)/1000));   //\n// \t// });                                                             //\n// \t// console.log(msgs);                                              //\n// \t// Messages.update({},{life:msgs});                                //\n// \t// Messages.update({},{$set:{life: maxLife - ((timeNow - timestamp)/1000)}},{multi:true});\n// }, interval);                                                       //\n/////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n","servePath":"/server/serverSide.js","sourceMap":{"version":3,"sources":["meteor://ðŸ’»app/server/serverSide.js"],"names":[],"mappings":"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","file":"/server/serverSide.js","sourcesContent":["if (Groups.find().count() == 0){\n\tGroups.insert({name: \"PublicGroup\", people: [], pubGroup: true});\n\tGroups.insert({name: \"SecondGroup\", people: [], pubGroup: true});\n}\n\nMeteor.methods({\n\tdoesUserExist: function (userName) {\n\t\tconsole.log(\"doesUserExist is being called.\");\n\t\tconsole.log(\"The return for the method is \" + Meteor.users.find({username: userName}).count());\n\t\treturn Meteor.users.find({username: userName}).count();\n\t},\n\n\tmessageSend: function(message){\n\t\tvar maxLife = (5)*(60)*(1000);\n\t\tvar newMsg = _.extend(message,{\n\t\t\tuderID: Meteor.user()._id,\n\t\t\tusername: Meteor.user().username,\n\t\t\tvotes:0,\n\t\t\tlife:maxLife,\n\t\t\t// radius:linearScale(message.text.length()),\n\t\t\tvoters:[]\n\t\t\t// groupName: Groups.find({_id:message.groupId})\n\t\t});\n\t\tvar id = Messages.insert(newMsg);\n\t\treturn {_id: id};\n\t},\n\n\tmessageVote: function(msgId,user){\n\t\t// console.log(Messages.find({id:msgId}));\n\t\tvar weight = (15)*(60)*(1000);\n\t\tvar maxLife = (5)*(60)*(1000);\n\t\tvar now = Date.now();\n\t\tconsole.log('messageVote');\n\t\tconsole.log(msgId);\n\t\tvar username = user.username;\n\t\t// console.log()\n\t\tif(Messages.find({_id:msgId,voters:username}).count()===0){\n\t\t\t\tMessages.find({_id:msgId}).forEach(function(data){\n\t\t\t\tconsole.log(maxLife - (Date.now()-data.timestamp));\n\t\t\t\tvar now = Date.now();\n\t\t\t\tMessages.update({_id:data._id},\n\t\t\t\t{\n\t\t\t\t\t\t$inc:{votes:1},\n\t\t\t\t\t\t$set:{life: maxLife - (now - data.timestamp) + weight*data.votes},\n\t\t\t\t\t\t$push:{voters:username}\n\t\t\t\t});\n\t\t\t});\n\t\t}else{\n\t\t\tconsole.log(\"already\");\n\t\t\tMessages.find({_id:msgId}).forEach(function(data){\n\t\t\t\tvar now = Date.now();\n\t\t\t\tMessages.update({_id:data._id},\n\t\t\t\t{\n\t\t\t\t\t\t$inc:{votes:-1},\n\t\t\t\t\t\t$pull:{voters:username},\n\t\t\t\t\t\t$set:{life: maxLife - (now - data.timestamp) + (weight*(data.votes-1))}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\t// console.log(Messages.find({id:msgId}));\n\t}\n});\n\n// if (Messages.find().count() == 0){\n// \tMessages.insert({name: \"chris\",\n// \ttext: \"test\",\n// \t});\n// }\n// if (Messages.find().count() == 0){\n// \tvar message = {\n// \t\t\ttext: \"root\",\n// \t\t\ttimestamp: Date.now(),\n// \t\t\tgroupName: \"PublicGroup\",\n// \t\t\ttransparency: 1\n// \t}; \n// \tMessages.insert(message);\n// }\n//an attempt to change opacity dynamically\n// var maxLife = 30000;\n// var interval = 5000;\n// Meteor.setInterval(function(){\n// \tMessages.updateMany({\n// \t\t{},\n// \t\t{\n// \t\t\t$set:{life: 1}\n// \t\t}\n// \t});\n// \t// var timeNow = Date.now()\n// \t// var msgs = Messages.find().map(function(u){\n// \t// \treturn Math.round(maxLife - ((timeNow - u.timestamp)/1000));\n// \t// });\n// \t// console.log(msgs);\n// \t// Messages.update({},{life:msgs});\n// \t// Messages.update({},{$set:{life: maxLife - ((timeNow - timestamp)/1000)}},{multi:true});\n// }, interval);\n"]}}]