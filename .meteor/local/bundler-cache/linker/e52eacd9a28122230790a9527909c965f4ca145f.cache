[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nDate = Package['es5-shim'].Date;\nparseInt = Package['es5-shim'].parseInt;\nECMAScript = Package.ecmascript.ECMAScript;\nRouter = Package['iron:router'].Router;\nRouteController = Package['iron:router'].RouteController;\n_ = Package.underscore._;\nMeteor = Package.meteor.Meteor;\nWebApp = Package.webapp.WebApp;\nmain = Package.webapp.main;\nWebAppInternals = Package.webapp.WebAppInternals;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nbabelHelpers = Package['babel-runtime'].babelHelpers;\nSymbol = Package['ecmascript-runtime'].Symbol;\nMap = Package['ecmascript-runtime'].Map;\nSet = Package['ecmascript-runtime'].Set;\nPromise = Package.promise.Promise;\nIron = Package['iron:core'].Iron;\nAccounts = Package['accounts-base'].Accounts;\nAccountsServer = Package['accounts-base'].AccountsServer;\nAutoupdate = Package.autoupdate.Autoupdate;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/packages/global-imports.js"},{"type":"js","data":"(function(){\n\n/////////////////////////////////////////////////////////////////////////\n//                                                                     //\n// lib/collections/groups.js                                           //\n//                                                                     //\n/////////////////////////////////////////////////////////////////////////\n                                                                       //\nGroups = new Mongo.Collection('groups');                               // 1\n                                                                       //\nGroups.allow({                                                         // 3\n\tinsert: function (userId, doc) {                                      // 4\n\t\treturn !!userId;                                                     // 5\n\t}                                                                     //\n});                                                                    //\n                                                                       //\nMeteor.methods({                                                       // 9\n\taddUser: function (newUser, specificGroup) {                          // 10\n\t\tconsole.log(\"Trying deeper\");                                        // 11\n\t\tGroups.update({ _id: specificGroup }, { $push: { people: newUser } });\n\t\t//console.log(currentGroup);                                         //\n\t},                                                                    //\n\tdeleteGroup: function (specificGroup) {                               // 15\n\t\t//Router.go('/');                                                    //\n\t\tconsole.log(specificGroup);                                          // 17\n\t\tGroups.remove(specificGroup);                                        // 18\n\t\tconsole.log(\"Deleted\");                                              // 19\n\t}                                                                     //\n});                                                                    //\n/////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n","servePath":"/lib/collections/groups.js","sourceMap":{"version":3,"sources":["meteor://ðŸ’»app/lib/collections/groups.js"],"names":[],"mappings":";;;;;;;;AAAA,MAAM,GAAG,IAAI,KAAK,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;;AAExC,MAAM,CAAC,KAAK,CAAC;AACZ,OAAM,EAAE,UAAS,MAAM,EAAE,GAAG,EAAC;AAC5B,SAAO,CAAC,CAAE,MAAM,CAAC;EACjB;CACD,CAAC,CAAC;;AAEH,MAAM,CAAC,OAAO,CAAC;AACd,QAAO,EAAE,UAAU,OAAO,EAAE,aAAa,EAAE;AAC1C,SAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;AAC7B,QAAM,CAAC,MAAM,CAAC,EAAC,GAAG,EAAE,aAAa,EAAC,EAAE,EAAC,KAAK,EAAE,EAAC,MAAM,EAAE,OAAO,EAAC,EAAC,CAAC,CAAC;;EAEhE;AACD,YAAW,EAAE,UAAU,aAAa,EAAE;;AAErC,SAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;AAC3B,QAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;AAC7B,SAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;EACvB;CACD,CAAC,CAAC,sE","file":"/lib/collections/groups.js","sourcesContent":["Groups = new Mongo.Collection('groups');\n\nGroups.allow({\n\tinsert: function(userId, doc){\n\t\treturn !! userId;\n\t}\n});\n\nMeteor.methods({\n\taddUser: function (newUser, specificGroup) {\n\t\tconsole.log(\"Trying deeper\");\n\t\tGroups.update({_id: specificGroup}, {$push: {people: newUser}});\n\t\t\t\t//console.log(currentGroup);\n\t},\n\tdeleteGroup: function (specificGroup) {\n\t\t//Router.go('/');\n\t\tconsole.log(specificGroup);\n\t\tGroups.remove(specificGroup);\n\t\tconsole.log(\"Deleted\");\n\t}\n});\n\n"]}},{"type":"js","data":"(function(){\n\n/////////////////////////////////////////////////////////////////////////\n//                                                                     //\n// lib/collections/messages.js                                         //\n//                                                                     //\n/////////////////////////////////////////////////////////////////////////\n                                                                       //\nMessages = new Mongo.Collection('messages');                           // 1\n                                                                       //\nMessages.allow({                                                       // 3\n\tinsert: function (userId, doc) {                                      // 4\n\t\treturn !!userId;                                                     // 5\n\t}                                                                     //\n});                                                                    //\n                                                                       //\nMeteor.methods({                                                       // 9\n                                                                       //\n\tmessageSend: function (message) {                                     // 11\n\t\tvar maxLife = 2 * 5 * 1000;                                          // 12\n\t\tvar newMsg = _.extend(message, {                                     // 13\n\t\t\tuderID: Meteor.user()._id,                                          // 14\n\t\t\tusername: Meteor.user().username,                                   // 15\n\t\t\tvotes: 0,                                                           // 16\n\t\t\t// radius:linearScale(message.text.length()),                       //\n\t\t\tlife: maxLife,                                                      // 18\n\t\t\tvoters: []                                                          // 19\n\t\t\t// groupName: Groups.find({_id:message.groupId})                    //\n\t\t});                                                                  //\n\t\tvar id = Messages.insert(newMsg);                                    // 22\n\t\treturn { _id: id };                                                  // 23\n\t}                                                                     //\n                                                                       //\n});                                                                    //\n/////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n","servePath":"/lib/collections/messages.js","sourceMap":{"version":3,"sources":["meteor://ðŸ’»app/lib/collections/messages.js"],"names":[],"mappings":";;;;;;;;AAAA,QAAQ,GAAG,IAAI,KAAK,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;;AAE5C,QAAQ,CAAC,KAAK,CAAC;AACd,OAAM,EAAE,UAAS,MAAM,EAAE,GAAG,EAAC;AAC5B,SAAO,CAAC,CAAE,MAAM,CAAC;EACjB;CACD,CAAC,CAAC;;AAEH,MAAM,CAAC,OAAO,CAAC;;AAEd,YAAW,EAAE,UAAS,OAAO,EAAC;AAC7B,MAAI,OAAO,GAAI,CAAC,GAAG,CAAE,GAAE,IAAK,CAAC;AAC7B,MAAI,MAAM,GAAG,CAAC,CAAC,MAAM,CAAC,OAAO,EAAC;AAC7B,SAAM,EAAE,MAAM,CAAC,IAAI,EAAE,CAAC,GAAG;AACzB,WAAQ,EAAE,MAAM,CAAC,IAAI,EAAE,CAAC,QAAQ;AAChC,QAAK,EAAC,CAAC;;AAEP,OAAI,EAAE,OAAO;AACb,SAAM,EAAC,EAAE;;GAET,CAAC,CAAC;AACH,MAAI,EAAE,GAAG,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;AACjC,SAAO,EAAC,GAAG,EAAE,EAAE,EAAC,CAAC;EACjB;;CAED,CAAC,CAAC,sE","file":"/lib/collections/messages.js","sourcesContent":["Messages = new Mongo.Collection('messages');\n\nMessages.allow({\n\tinsert: function(userId, doc){\n\t\treturn !! userId;\n\t}\n});\n\nMeteor.methods({\n\t\n\tmessageSend: function(message){\n\t\tvar maxLife = (2)*(5)*(1000);\n\t\tvar newMsg = _.extend(message,{\n\t\t\tuderID: Meteor.user()._id,\n\t\t\tusername: Meteor.user().username,\n\t\t\tvotes:0,\n\t\t\t// radius:linearScale(message.text.length()),\n\t\t\tlife: maxLife,\n\t\t\tvoters:[]\n\t\t\t// groupName: Groups.find({_id:message.groupId})\n\t\t});\n\t\tvar id = Messages.insert(newMsg);\n\t\treturn {_id: id};\n\t}\n\n});"]}},{"type":"js","data":"(function(){\n\n/////////////////////////////////////////////////////////////////////////\n//                                                                     //\n// lib/router.js                                                       //\n//                                                                     //\n/////////////////////////////////////////////////////////////////////////\n                                                                       //\nRouter.configure({                                                     // 1\n\tlayoutTemplate: 'layout',                                             // 2\n\tloadingTemplate: 'loading',                                           // 3\n\tnotFoundTemplate: 'notFound',                                         // 4\n\twaitOn: function () {                                                 // 5\n\t\tconsole.log(\"subscribed\");                                           // 6\n\t\treturn [Meteor.subscribe('groups'), Meteor.subscribe('messages')];   // 7\n\t}                                                                     //\n});                                                                    //\n                                                                       //\nvar requireLogin = function () {                                       // 11\n\tif (!Meteor.user()) {                                                 // 12\n\t\tthis.render(\"loginRequired\");                                        // 13\n\t} else {                                                              //\n\t\tthis.next();                                                         // 15\n\t}                                                                     //\n};                                                                     //\n                                                                       //\n//Router.route('/send',{name: 'messageSend'});                         //\nRouter.route('/', { name: 'groupList' });                              // 20\nRouter.route('groups/:_id', {                                          // 21\n\tname: 'groupPage',                                                    // 23\n\tdata: function () {                                                   // 24\n\t\treturn Groups.findOne(this.params._id);                              // 25\n\t}                                                                     //\n});                                                                    //\n                                                                       //\nRouter.onBeforeAction('dataNotFound', { only: 'groupPage' });          // 29\n// Router.onBeforeAction(function() {                                  //\n//     if () {                                                         //\n//         this.render(\"You are not allowed to access this group\");    //\n//     } else {                                                        //\n//         this.next();                                                //\n//     }                                                               //\n// }, {only : 'groupPage'});                                           //\nRouter.onBeforeAction(requireLogin, { only: 'messageSend' });          // 37\n/////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n","servePath":"/lib/router.js","sourceMap":{"version":3,"sources":["meteor://ðŸ’»app/lib/router.js"],"names":[],"mappings":";;;;;;;;AAAA,MAAM,CAAC,SAAS,CAAC;AAChB,eAAc,EAAE,QAAQ;AACxB,gBAAe,EAAE,SAAS;AAC1B,iBAAgB,EAAE,UAAU;AAC5B,OAAM,EAAE,YAAU;AACjB,SAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;AAC1B,SAAO,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,MAAM,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC;EAClE;CACD,CAAC,CAAC;;AAEH,IAAI,YAAY,GAAG,YAAU;AAC5B,KAAG,CAAC,MAAM,CAAC,IAAI,EAAE,EAAC;AACjB,MAAI,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;EAC7B,MAAI;AACJ,MAAI,CAAC,IAAI,EAAE,CAAC;EACZ;CACD;;;AAGD,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE,EAAC,IAAI,EAAE,WAAW,EAAC,CAAC,CAAC;AACvC,MAAM,CAAC,KAAK,CAAC,aAAa,EAC1B;AACC,KAAI,EAAE,WAAW;AACjB,KAAI,EAAE,YAAW;AAChB,SAAO,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;EACvC;CACD,CAAC,CAAC;;AAEH,MAAM,CAAC,cAAc,CAAC,cAAc,EAAE,EAAC,IAAI,EAAE,WAAW,EAAC,CAAC,CAAC;;;;;;;;AAQ3D,MAAM,CAAC,cAAc,CAAC,YAAY,EAAC,EAAC,IAAI,EAAC,aAAa,EAAC,CAAC,CAAC,e","file":"/lib/router.js","sourcesContent":["Router.configure({\n\tlayoutTemplate: 'layout',\n\tloadingTemplate: 'loading',\n\tnotFoundTemplate: 'notFound',\n\twaitOn: function(){\n\t\tconsole.log(\"subscribed\");\n\t\treturn [Meteor.subscribe('groups'), Meteor.subscribe('messages')];\n\t}\n});\n\nvar requireLogin = function(){\n\tif(!Meteor.user()){\n\t\tthis.render(\"loginRequired\");\n\t}else{\n\t\tthis.next();\n\t}\n}\n\n//Router.route('/send',{name: 'messageSend'});\nRouter.route('/', {name: 'groupList'});\nRouter.route('groups/:_id',\n{\n\tname: 'groupPage',\n\tdata: function() {\n\t\treturn Groups.findOne(this.params._id);\n\t}\n});\n\nRouter.onBeforeAction('dataNotFound', {only: 'groupPage'});\n// Router.onBeforeAction(function() {\n//     if () {\n//         this.render(\"You are not allowed to access this group\");\n//     } else {\n//         this.next();\n//     }\n// }, {only : 'groupPage'});\nRouter.onBeforeAction(requireLogin,{only:'messageSend'});\n"]}},{"type":"js","data":"(function(){\n\n/////////////////////////////////////////////////////////////////////////\n//                                                                     //\n// lib/users.js                                                        //\n//                                                                     //\n/////////////////////////////////////////////////////////////////////////\n                                                                       //\nMeteor.users.deny({                                                    // 1\n  update: function () {                                                // 2\n    return true;                                                       // 3\n  }                                                                    //\n});                                                                    //\n/////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n","servePath":"/lib/users.js","sourceMap":{"version":3,"sources":["meteor://ðŸ’»app/lib/users.js"],"names":[],"mappings":";;;;;;;;AAAA,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC;AAChB,QAAM,EAAE,YAAW;AACjB,WAAO,IAAI,CAAC;GACb;CACF,CAAC,CAAC,sE","file":"/lib/users.js","sourcesContent":["Meteor.users.deny({\n  update: function() {\n    return true;\n  }\n});\n"]}},{"type":"js","data":"(function(){\n\n/////////////////////////////////////////////////////////////////////////\n//                                                                     //\n// server/publications.js                                              //\n//                                                                     //\n/////////////////////////////////////////////////////////////////////////\n                                                                       //\nMeteor.publish('groups', function () {                                 // 1\n\treturn Groups.find();                                                 // 2\n});                                                                    //\n                                                                       //\nMeteor.publish('messages', function (group) {                          // 5\n\tconsole.log(\"publications **** \" + group);                            // 6\n\tvar weight = -15 * 60 * 1000;                                         // 7\n\tvar maxLife = 1 * 5 * 1000;                                           // 8\n\t// Messages.aggregate(                                                //\n\t// [{$project:                                                        //\n\t// \t{                                                                 //\n\t// \t\tlife:{$add: [\"$life\", [{ $multiply: [\"$votes\", (-15)*(60)*(1000)]} ] ]}\n\t// \t}                                                                 //\n\t// }                                                                  //\n\t// ]);                                                                //\n\tMessages.find().forEach(function (data) {                             // 16\n\t\tconsole.log(maxLife - (Date.now() - data.timestamp));                // 17\n\t\tvar now = Date.now();                                                // 18\n\t\tMessages.update({ _id: data._id }, { $set: { life: maxLife - (now - data.timestamp) + weight * data.votes }\n\t\t});                                                                  //\n\t});                                                                   //\n                                                                       //\n\tMessages.remove({ life: { $lt: 0 } });                                // 24\n                                                                       //\n\treturn Messages.find({ groupId: group }, { life: { $gt: 0 } });       // 26\n});                                                                    //\n                                                                       //\n//Meteor.publish(\"allUsers\", function () {                             //\n//  return Meteor.users.find({});                                      //\n//});                                                                  //\n/////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n","servePath":"/server/publications.js","sourceMap":{"version":3,"sources":["/server/publications.js"],"names":[],"mappings":";;;;;;;;AAAA,MAAM,CAAC,OAAO,CAAC,QAAQ,EAAC,YAAU;AACjC,QAAO,MAAM,CAAC,IAAI,EAAE,CAAC;CACrB,CAAC,CAAC;;AAEH,MAAM,CAAC,OAAO,CAAC,UAAU,EAAC,UAAS,KAAK,EAAC;AACxC,QAAO,CAAC,GAAG,CAAC,oBAAoB,GAAG,KAAK,CAAC,CAAC;AAC1C,KAAI,MAAM,GAAI,CAAC,EAAE,GAAG,EAAG,GAAE,IAAK,CAAC;AAC/B,KAAI,OAAO,GAAI,CAAC,GAAG,CAAE,GAAE,IAAK,CAAC;;;;;;;;AAQ7B,SAAQ,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC,UAAS,IAAI,EAAC;AACrC,SAAO,CAAC,GAAG,CAAC,OAAO,IAAI,IAAI,CAAC,GAAG,EAAE,GAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;AACnD,MAAI,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;AACrB,UAAQ,CAAC,MAAM,CAAC,EAAC,GAAG,EAAC,IAAI,CAAC,GAAG,EAAC,EAC7B,EAAC,IAAI,EAAC,EAAC,IAAI,EAAE,OAAO,IAAI,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,MAAM,GAAC,IAAI,CAAC,KAAK,EAAE;GACnE,CAAC,CAAC;EACH,CAAC,CAAC;;AAEH,SAAQ,CAAC,MAAM,CAAC,EAAC,IAAI,EAAC,EAAC,GAAG,EAAC,CAAC,EAAC,EAAC,CAAC,CAAC;;AAEhC,QAAO,QAAQ,CAAC,IAAI,CAAC,EAAC,OAAO,EAAC,KAAK,EAAC,EAAC,EAAC,IAAI,EAAC,EAAC,GAAG,EAAC,CAAC,EAAC,EAAC,CAAC,CAAC;CACrD,CAAC,CAAC","file":"/server/publications.js","sourcesContent":["Meteor.publish('groups',function(){\n\treturn Groups.find();\n});\n\nMeteor.publish('messages',function(group){\n\tconsole.log(\"publications **** \" + group);\n\tvar weight = (-15)*(60)*(1000);\n\tvar maxLife = (1)*(5)*(1000);\n\t// Messages.aggregate(\n\t// [{$project:\n\t// \t{\n\t// \t\tlife:{$add: [\"$life\", [{ $multiply: [\"$votes\", (-15)*(60)*(1000)]} ] ]}\n\t// \t}\n\t// }\n\t// ]);\n\tMessages.find().forEach(function(data){\n\t\tconsole.log(maxLife - (Date.now()-data.timestamp));\n\t\tvar now = Date.now();\n\t\tMessages.update({_id:data._id},\n\t\t\t{$set:{life: maxLife - (now - data.timestamp) + weight*data.votes }\n\t\t});\n\t});\n\n\tMessages.remove({life:{$lt:0}});\n\n\treturn Messages.find({groupId:group},{life:{$gt:0}});\n});\n\n//Meteor.publish(\"allUsers\", function () {\n//  return Meteor.users.find({});\n//});\n"]}},{"type":"js","data":"(function(){\n\n/////////////////////////////////////////////////////////////////////////\n//                                                                     //\n// server/serverSide.js                                                //\n//                                                                     //\n/////////////////////////////////////////////////////////////////////////\n                                                                       //\n// if (Messages.find().count() == 0){                                  //\n// \tMessages.insert({name: \"chris\",                                    //\n// \ttext: \"test\",                                                      //\n// \t});                                                                //\n// }                                                                   //\nif (Groups.find().count() == 0) {                                      // 6\n\tGroups.insert({ name: \"PublicGroup\", people: [] });                   // 7\n\tGroups.insert({ name: \"SecondGroup\", people: [] });                   // 8\n}                                                                      //\n                                                                       //\nMeteor.methods({                                                       // 11\n\tdoesUserExist: function (userName) {                                  // 12\n\t\t// console.log(Meteor.users.find().fetch());                         //\n\t\t// console.log(Meteor.users.find({username: userName}).count());     //\n\t\t// console.log(userName);                                            //\n\t\treturn Meteor.users.find({ username: userName }).count();            // 16\n\t},                                                                    //\n                                                                       //\n\tmessageVote: function (msgId) {                                       // 19\n\t\t// console.log(Messages.find({id:msgId}));                           //\n\t\tvar weight = 15 * 60 * 1000;                                         // 21\n\t\tvar maxLife = 2 * 5 * 1000;                                          // 22\n\t\tvar now = Date.now();                                                // 23\n\t\tconsole.log('messageVote');                                          // 24\n\t\tconsole.log(msgId);                                                  // 25\n\t\t// console.log()                                                     //\n\t\tMessages.update({ _id: msgId }, { $inc: { votes: 1 } });             // 27\n\t\tMessages.find({ _id: msgId }).forEach(function (data) {              // 28\n\t\t\tconsole.log(maxLife - (Date.now() - data.timestamp));               // 29\n\t\t\tvar now = Date.now();                                               // 30\n\t\t\tMessages.update({ _id: data._id }, { $set: { life: maxLife - (now - data.timestamp) + weight * data.votes }\n\t\t\t});                                                                 //\n\t\t});                                                                  //\n\t\t// console.log(Messages.find({id:msgId}));                           //\n\t}                                                                     //\n});                                                                    //\n// if (Messages.find().count() == 0){                                  //\n// \tvar message = {                                                    //\n// \t\t\ttext: \"root\",                                                    //\n// \t\t\ttimestamp: Date.now(),                                           //\n// \t\t\tgroupName: \"PublicGroup\",                                        //\n// \t\t\ttransparency: 1                                                  //\n// \t};                                                                 //\n// \tMessages.insert(message);                                          //\n// }                                                                   //\n//an attempt to change opacity dynamically                             //\n// var maxLife = 30000;                                                //\n// var interval = 5000;                                                //\n// Meteor.setInterval(function(){                                      //\n// \tMessages.updateMany({                                              //\n// \t\t{},                                                               //\n// \t\t{                                                                 //\n// \t\t\t$set:{life: 1}                                                   //\n// \t\t}                                                                 //\n// \t});                                                                //\n// \t// var timeNow = Date.now()                                        //\n// \t// var msgs = Messages.find().map(function(u){                     //\n// \t// \treturn Math.round(maxLife - ((timeNow - u.timestamp)/1000));   //\n// \t// });                                                             //\n// \t// console.log(msgs);                                              //\n// \t// Messages.update({},{life:msgs});                                //\n// \t// Messages.update({},{$set:{life: maxLife - ((timeNow - timestamp)/1000)}},{multi:true});\n// }, interval);                                                       //\n/////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n","servePath":"/server/serverSide.js","sourceMap":{"version":3,"sources":["/server/serverSide.js"],"names":[],"mappings":";;;;;;;;;;;;;AAKA,IAAI,MAAM,CAAC,IAAI,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAC;AAC9B,OAAM,CAAC,MAAM,CAAC,EAAC,IAAI,EAAE,aAAa,EAAE,MAAM,EAAE,EAAE,EAAC,CAAC,CAAC;AACjD,OAAM,CAAC,MAAM,CAAC,EAAC,IAAI,EAAE,aAAa,EAAE,MAAM,EAAE,EAAE,EAAC,CAAC,CAAC;CACjD;;AAED,MAAM,CAAC,OAAO,CAAC;AACd,cAAa,EAAE,UAAU,QAAQ,EAAE;;;;AAIlC,SAAO,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,EAAC,QAAQ,EAAE,QAAQ,EAAC,CAAC,CAAC,KAAK,EAAE,CAAC;EACvD;;AAED,YAAW,EAAE,UAAS,KAAK,EAAC;;AAE3B,MAAI,MAAM,GAAI,EAAE,GAAG,EAAG,GAAE,IAAK,CAAC;AAC9B,MAAI,OAAO,GAAI,CAAC,GAAG,CAAE,GAAE,IAAK,CAAC;AAC7B,MAAI,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;AACrB,SAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;AAC3B,SAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;;AAEnB,UAAQ,CAAC,MAAM,CAAC,EAAC,GAAG,EAAC,KAAK,EAAC,EAAC,EAAC,IAAI,EAAC,EAAC,KAAK,EAAC,CAAC,EAAC,EAAC,CAAC,CAAC;AAC9C,UAAQ,CAAC,IAAI,CAAC,EAAC,GAAG,EAAC,KAAK,EAAC,CAAC,CAAC,OAAO,CAAC,UAAS,IAAI,EAAC;AACjD,UAAO,CAAC,GAAG,CAAC,OAAO,IAAI,IAAI,CAAC,GAAG,EAAE,GAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;AACnD,OAAI,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;AACrB,WAAQ,CAAC,MAAM,CAAC,EAAC,GAAG,EAAC,IAAI,CAAC,GAAG,EAAC,EAC7B,EAAC,IAAI,EAAC,EAAC,IAAI,EAAE,OAAO,IAAI,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,MAAM,GAAC,IAAI,CAAC,KAAK,EAAE;IACnE,CAAC,CAAC;GACH,CAAC,CAAC;;EAEF;CACD,CAAC,CAAC","file":"/server/serverSide.js","sourcesContent":["// if (Messages.find().count() == 0){\n// \tMessages.insert({name: \"chris\",\n// \ttext: \"test\",\n// \t});\n// }\nif (Groups.find().count() == 0){\n\tGroups.insert({name: \"PublicGroup\", people: []});\n\tGroups.insert({name: \"SecondGroup\", people: []});\n}\n\nMeteor.methods({\n\tdoesUserExist: function (userName) {\n\t\t// console.log(Meteor.users.find().fetch());\n\t\t// console.log(Meteor.users.find({username: userName}).count());\n\t\t// console.log(userName);\n\t\treturn Meteor.users.find({username: userName}).count();\n\t},\n\n\tmessageVote: function(msgId){\n\t\t// console.log(Messages.find({id:msgId}));\n\t\tvar weight = (15)*(60)*(1000);\n\t\tvar maxLife = (2)*(5)*(1000);\n\t\tvar now = Date.now();\n\t\tconsole.log('messageVote');\n\t\tconsole.log(msgId);\n\t\t// console.log()\n\t\tMessages.update({_id:msgId},{$inc:{votes:1}});\n\t\tMessages.find({_id:msgId}).forEach(function(data){\n\t\tconsole.log(maxLife - (Date.now()-data.timestamp));\n\t\tvar now = Date.now();\n\t\tMessages.update({_id:data._id},\n\t\t\t{$set:{life: maxLife - (now - data.timestamp) + weight*data.votes }\n\t\t});\n\t});\n\t\t// console.log(Messages.find({id:msgId}));\n\t}\n});\n// if (Messages.find().count() == 0){\n// \tvar message = {\n// \t\t\ttext: \"root\",\n// \t\t\ttimestamp: Date.now(),\n// \t\t\tgroupName: \"PublicGroup\",\n// \t\t\ttransparency: 1\n// \t}; \n// \tMessages.insert(message);\n// }\n//an attempt to change opacity dynamically\n// var maxLife = 30000;\n// var interval = 5000;\n// Meteor.setInterval(function(){\n// \tMessages.updateMany({\n// \t\t{},\n// \t\t{\n// \t\t\t$set:{life: 1}\n// \t\t}\n// \t});\n// \t// var timeNow = Date.now()\n// \t// var msgs = Messages.find().map(function(u){\n// \t// \treturn Math.round(maxLife - ((timeNow - u.timestamp)/1000));\n// \t// });\n// \t// console.log(msgs);\n// \t// Messages.update({},{life:msgs});\n// \t// Messages.update({},{$set:{life: maxLife - ((timeNow - timestamp)/1000)}},{multi:true});\n// }, interval);\n"]}}]