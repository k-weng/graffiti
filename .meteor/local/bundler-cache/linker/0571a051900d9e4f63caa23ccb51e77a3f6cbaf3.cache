[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nDate = Package['es5-shim'].Date;\nparseInt = Package['es5-shim'].parseInt;\nECMAScript = Package.ecmascript.ECMAScript;\nRouter = Package['iron:router'].Router;\nRouteController = Package['iron:router'].RouteController;\n_ = Package.underscore._;\nAccountsTemplates = Package['useraccounts:core'].AccountsTemplates;\nMeteor = Package.meteor.Meteor;\nWebApp = Package.webapp.WebApp;\nmain = Package.webapp.main;\nWebAppInternals = Package.webapp.WebAppInternals;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nbabelHelpers = Package['babel-runtime'].babelHelpers;\nSymbol = Package['ecmascript-runtime'].Symbol;\nMap = Package['ecmascript-runtime'].Map;\nSet = Package['ecmascript-runtime'].Set;\nPromise = Package.promise.Promise;\nIron = Package['iron:core'].Iron;\nAccounts = Package['accounts-base'].Accounts;\nAccountsServer = Package['accounts-base'].AccountsServer;\nT9n = Package['softwarerero:accounts-t9n'].T9n;\nAutoupdate = Package.autoupdate.Autoupdate;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/packages/global-imports.js"},{"type":"js","data":"(function(){\n\n/////////////////////////////////////////////////////////////////////////\n//                                                                     //\n// lib/collections/groups.js                                           //\n//                                                                     //\n/////////////////////////////////////////////////////////////////////////\n                                                                       //\nGroups = new Mongo.Collection('groups');                               // 1\n                                                                       //\nGroups.allow({                                                         // 3\n\tinsert: function (userId, doc) {                                      // 4\n\t\treturn !!userId;                                                     // 5\n\t}                                                                     //\n});                                                                    //\n                                                                       //\nMeteor.methods({                                                       // 9\n\taddUser: function (newUser, specificGroup) {                          // 10\n\t\tGroups.update({ _id: specificGroup }, { $push: { people: newUser } });\n\t\tSession.set('addUserMessages', \"User is added\");                     // 12\n\t},                                                                    //\n                                                                       //\n\tdeleteGroup: function (specificGroup) {                               // 15\n\t\tGroups.remove({ _id: specificGroup });                               // 16\n\t\tMessages.remove({ groupId: specificGroup });                         // 17\n\t},                                                                    //\n                                                                       //\n\tquitGroup: function (specificGroup) {                                 // 20\n\t\tGroups.update({ _id: specificGroup }, { $pull: { people: Meteor.user().username } });\n\t}                                                                     //\n});                                                                    //\n/////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n","servePath":"/lib/collections/groups.js","sourceMap":{"version":3,"sources":["meteor://ðŸ’»app/lib/collections/groups.js"],"names":[],"mappings":";;;;;;;;AAAA,MAAM,GAAG,IAAI,KAAK,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;;AAExC,MAAM,CAAC,KAAK,CAAC;AACZ,OAAM,EAAE,UAAU,MAAM,EAAE,GAAG,EAAC;AAC7B,SAAO,CAAC,CAAE,MAAM,CAAC;EACjB;CACD,CAAC,CAAC;;AAEH,MAAM,CAAC,OAAO,CAAC;AACd,QAAO,EAAE,UAAU,OAAO,EAAE,aAAa,EAAE;AAC1C,QAAM,CAAC,MAAM,CAAC,EAAC,GAAG,EAAE,aAAa,EAAC,EAAE,EAAC,KAAK,EAAE,EAAC,MAAM,EAAE,OAAO,EAAC,EAAC,CAAC,CAAC;AAChE,SAAO,CAAC,GAAG,CAAC,iBAAiB,EAAE,eAAe,CAAC,CAAC;EAChD;;AAED,YAAW,EAAE,UAAU,aAAa,EAAE;AACrC,QAAM,CAAC,MAAM,CAAC,EAAC,GAAG,EAAC,aAAa,EAAC,CAAC,CAAC;AACnC,UAAQ,CAAC,MAAM,CAAC,EAAC,OAAO,EAAC,aAAa,EAAC,CAAC,CAAC;EACzC;;AAED,UAAS,EAAE,UAAU,aAAa,EAAE;AACnC,QAAM,CAAC,MAAM,CAAC,EAAC,GAAG,EAAE,aAAa,EAAC,EAAE,EAAC,KAAK,EAAE,EAAC,MAAM,EAAE,MAAM,CAAC,IAAI,EAAE,CAAC,QAAQ,EAAC,EAAC,CAAC,CAAC;EAC/E;CACD,CAAC,CAAC,sE","file":"/lib/collections/groups.js","sourcesContent":["Groups = new Mongo.Collection('groups');\n\nGroups.allow({\n\tinsert: function (userId, doc){\n\t\treturn !! userId;\n\t}\n});\n\nMeteor.methods({\n\taddUser: function (newUser, specificGroup) {\n\t\tGroups.update({_id: specificGroup}, {$push: {people: newUser}});\n\t\tSession.set('addUserMessages', \"User is added\");\n\t},\n\n\tdeleteGroup: function (specificGroup) {\n\t\tGroups.remove({_id:specificGroup});\n\t\tMessages.remove({groupId:specificGroup});\n\t},\n\t\n\tquitGroup: function (specificGroup) {\n\t\tGroups.update({_id: specificGroup}, {$pull: {people: Meteor.user().username}});\n\t}\n});\n\n"]}},{"type":"js","data":"(function(){\n\n/////////////////////////////////////////////////////////////////////////\n//                                                                     //\n// lib/collections/messages.js                                         //\n//                                                                     //\n/////////////////////////////////////////////////////////////////////////\n                                                                       //\nMessages = new Mongo.Collection('messages');                           // 1\n                                                                       //\nMessages.allow({                                                       // 3\n\tinsert: function (userId, doc) {                                      // 4\n\t\treturn !!userId;                                                     // 5\n\t}                                                                     //\n});                                                                    //\n                                                                       //\nMeteor.methods({                                                       // 9\n                                                                       //\n\t// messageSend: function(message){                                    //\n\t// \tvar maxLife = (1)*(5)*(1000);                                     //\n\t// \tvar newMsg = _.extend(message,{                                   //\n\t// \t\tuderID: Meteor.user()._id,                                       //\n\t// \t\tusername: Meteor.user().username,                                //\n\t// \t\tvotes:0,                                                         //\n\t// \t\t// radius:linearScale(message.text.length()),                    //\n\t// \t\tlife: maxLife,                                                   //\n\t// \t\tvoters:[]                                                        //\n\t// \t\t// groupName: Groups.find({_id:message.groupId})                 //\n\t// \t});                                                               //\n\t// \tvar id = Messages.insert(newMsg);                                 //\n\t// \treturn {_id: id};                                                 //\n\t// }                                                                  //\n                                                                       //\n});                                                                    //\n/////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n","servePath":"/lib/collections/messages.js","sourceMap":{"version":3,"sources":["meteor://ðŸ’»app/lib/collections/messages.js"],"names":[],"mappings":";;;;;;;;AAAA,QAAQ,GAAG,IAAI,KAAK,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;;AAE5C,QAAQ,CAAC,KAAK,CAAC;AACd,OAAM,EAAE,UAAS,MAAM,EAAE,GAAG,EAAE;AAC7B,SAAO,CAAC,CAAE,MAAM,CAAC;EACjB;CACD,CAAC,CAAC;;AAEH,MAAM,CAAC,OAAO,CAAC;;;;;;;;;;;;;;;;;CAiBd,CAAC,CAAC,sE","file":"/lib/collections/messages.js","sourcesContent":["Messages = new Mongo.Collection('messages');\n\nMessages.allow({\n\tinsert: function(userId, doc) {\n\t\treturn !! userId;\n\t}\n});\n\nMeteor.methods({\n\t\n\t// messageSend: function(message){\n\t// \tvar maxLife = (1)*(5)*(1000);\n\t// \tvar newMsg = _.extend(message,{\n\t// \t\tuderID: Meteor.user()._id,\n\t// \t\tusername: Meteor.user().username,\n\t// \t\tvotes:0,\n\t// \t\t// radius:linearScale(message.text.length()),\n\t// \t\tlife: maxLife,\n\t// \t\tvoters:[]\n\t// \t\t// groupName: Groups.find({_id:message.groupId})\n\t// \t});\n\t// \tvar id = Messages.insert(newMsg);\n\t// \treturn {_id: id};\n\t// }\n\t\n});"]}},{"type":"js","data":"(function(){\n\n/////////////////////////////////////////////////////////////////////////\n//                                                                     //\n// lib/collections/users.js                                            //\n//                                                                     //\n/////////////////////////////////////////////////////////////////////////\n                                                                       //\nMeteor.users.deny({                                                    // 1\n  update: function () {                                                // 2\n    return true;                                                       // 3\n  }                                                                    //\n});                                                                    //\n/////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n","servePath":"/lib/collections/users.js","sourceMap":{"version":3,"sources":["meteor://ðŸ’»app/lib/collections/users.js"],"names":[],"mappings":";;;;;;;;AAAA,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC;AAChB,QAAM,EAAE,YAAW;AACjB,WAAO,IAAI,CAAC;GACb;CACF,CAAC,CAAC,sE","file":"/lib/collections/users.js","sourcesContent":["Meteor.users.deny({\n  update: function() {\n    return true;\n  }\n});"]}},{"type":"js","data":"(function(){\n\n/////////////////////////////////////////////////////////////////////////\n//                                                                     //\n// lib/router.js                                                       //\n//                                                                     //\n/////////////////////////////////////////////////////////////////////////\n                                                                       //\nRouter.configure({                                                     // 1\n    layoutTemplate: 'layout',                                          // 2\n    loadingTemplate: 'loading',                                        // 3\n    notFoundTemplate: 'notFound',                                      // 4\n    yieldTemplates: {                                                  // 5\n        nav: { to: 'nav' }                                             // 6\n    },                                                                 //\n    waitOn: function () {                                              // 8\n        return [Meteor.subscribe('groups'), Meteor.subscribe('messages')];\n        // return [Meteor.subscribe('groups','sprays',-1), Meteor.subscribe('messages')];\n    }                                                                  //\n});                                                                    //\n                                                                       //\n//Router.route('/send',{name: 'messageSend'});                         //\nRouter.map(function () {                                               // 15\n    this.route('home', { path: '/',                                    // 16\n        onBeforeAction: function () {                                  // 17\n            $('body').addClass('home');                                // 18\n            this.next();                                               // 19\n        },                                                             //\n                                                                       //\n        onStop: function () {                                          // 22\n            $('body').removeClass('home');                             // 23\n        }                                                              //\n    });                                                                //\n                                                                       //\n    this.route('groupList', { path: '/groups' });                      // 27\n});                                                                    //\n                                                                       //\nRouter.route('groups/:_id', {                                          // 30\n    name: 'groupPage',                                                 // 32\n    data: function () {                                                // 33\n        return Groups.findOne(this.params._id);                        // 34\n    }                                                                  //\n});                                                                    //\n                                                                       //\nRouter.route('userPage', {                                             // 38\n    name: 'userPage'                                                   // 40\n});                                                                    //\n                                                                       //\nvar requireLogin = function () {                                       // 43\n    if (!Meteor.user()) {                                              // 44\n        // If user is not logged in render landingpage                 //\n        Router.go('/');                                                // 46\n    } else {                                                           //\n        //if user is logged in render whatever route was requested     //\n        this.next();                                                   // 49\n    }                                                                  //\n};                                                                     //\n                                                                       //\nvar goToGroups = function (pause) {                                    // 53\n    if (Meteor.userId()) {                                             // 54\n        Router.go('groupList');                                        // 55\n    } else {                                                           //\n        Router.go('/');                                                // 57\n        this.next();                                                   // 58\n    }                                                                  //\n};                                                                     //\n                                                                       //\nRouter.onBeforeAction(function () {                                    // 62\n    $('body').addClass('body-home');                                   // 63\n    this.next();                                                       // 64\n});                                                                    //\n                                                                       //\nRouter.onBeforeAction(requireLogin, { except: 'home' });               // 67\n                                                                       //\nRouter.onBeforeAction(goToGroups, { only: ['home'] });                 // 69\n                                                                       //\nRouter.onBeforeAction(function () {                                    // 71\n    var user = Meteor.user().username;                                 // 72\n    var currentGroupId = Router.current().params._id;                  // 73\n    var notAllowedIn = Groups.find({ _id: currentGroupId, people: { $in: [user] } }).count() === 0;\n    var isPrivate = Groups.find({ _id: currentGroupId, privateGroup: true }) === 1;\n                                                                       //\n    if (notAllowedIn && isPrivate) {                                   // 77\n        Router.go('/');                                                // 78\n    } else {                                                           //\n        this.next();                                                   // 80\n    }                                                                  //\n}, { only: 'groupPage' });                                             //\n//Router.onBeforeAction('dataNotFound', {only: 'groupPage'});          //\n                                                                       //\n// Router.plugin('ensureSignedIn', {                                   //\n//   only: ['groupPage']                                               //\n// });                                                                 //\n                                                                       //\n// AccountsTemplates.configureRoute('enrollAccount');                  //\n// AccountsTemplates.configureRoute('signIn');                         //\n// AccountsTemplates.configureRoute('signUp');                         //\n/////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n","servePath":"/lib/router.js","sourceMap":{"version":3,"sources":["meteor://ðŸ’»app/lib/router.js"],"names":[],"mappings":"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","file":"/lib/router.js","sourcesContent":["Router.configure({\n    layoutTemplate: 'layout',\n    loadingTemplate: 'loading',\n    notFoundTemplate: 'notFound',\n    yieldTemplates: {\n        nav: {to: 'nav'}\n    },\n\twaitOn: function() {\n        return [Meteor.subscribe('groups'), Meteor.subscribe('messages')];\n\t\t// return [Meteor.subscribe('groups','sprays',-1), Meteor.subscribe('messages')];\n\t}\n});\n\n//Router.route('/send',{name: 'messageSend'});\nRouter.map(function() {\n    this.route('home', {path: '/',\n        onBeforeAction: function() {\n            $('body').addClass('home');\n            this.next();\n        },\n\n        onStop: function() {\n            $('body').removeClass('home');\n        }\n\t});\n  \n    this.route('groupList', {path: '/groups'});\n});\n\nRouter.route('groups/:_id',\n{\n\tname: 'groupPage',\n\tdata: function() {\n\t\treturn Groups.findOne(this.params._id);\n\t}\n});\n\nRouter.route('userPage',\n{\n    name: 'userPage'\n});\n\nvar requireLogin = function() { \n\tif (! Meteor.user()) {\n       \t// If user is not logged in render landingpage\n    \tRouter.go('/');\n \t} else {\n        //if user is logged in render whatever route was requested\n   \t\tthis.next(); \n \t}\n}\n\nvar goToGroups = function(pause) {\n  if (Meteor.userId()) {\n    Router.go('groupList');\n  } else {\n  \tRouter.go('/');\n    this.next();\n  }\n};\n\nRouter.onBeforeAction(function() {\n    $('body').addClass('body-home');\n    this.next();\n});\n\nRouter.onBeforeAction(requireLogin, {except: 'home'});\n\nRouter.onBeforeAction(goToGroups, {only: ['home']});\n\nRouter.onBeforeAction(function() {\n    var user = Meteor.user().username;\n\tvar currentGroupId = Router.current().params._id;\n    var notAllowedIn = Groups.find({_id: currentGroupId, people: {$in: [user]}}).count() === 0;\n    var isPrivate = Groups.find({_id: currentGroupId, privateGroup: true}) === 1;\n\n    if (notAllowedIn && isPrivate) {\n  \t Router.go('/');\n    } else {\n        this.next();\n    }\n}, {only : 'groupPage'});\n//Router.onBeforeAction('dataNotFound', {only: 'groupPage'});\n\n\n\n// Router.plugin('ensureSignedIn', {\n//   only: ['groupPage']\n// });\n\n// AccountsTemplates.configureRoute('enrollAccount');\n// AccountsTemplates.configureRoute('signIn');\n// AccountsTemplates.configureRoute('signUp');\n"]}},{"type":"js","data":"(function(){\n\n/////////////////////////////////////////////////////////////////////////\n//                                                                     //\n// lib/useraccount_config.js                                           //\n//                                                                     //\n/////////////////////////////////////////////////////////////////////////\n                                                                       //\n                                                                       //\n// Options                                                             //\nAccountsTemplates.configure({                                          // 3\n  // defaultLayout: 'emptyLayout',                                     //\n  //showForgotPasswordLink: true,                                      //\n  overrideLoginErrors: true,                                           // 6\n  //enablePasswordChange: true,                                        //\n                                                                       //\n  // sendVerificationEmail: true,                                      //\n  // enforceEmailVerification: true,                                   //\n  //confirmPassword: true,                                             //\n  //continuousValidation: false,                                       //\n  //displayFormLabels: true,                                           //\n  //forbidClientAccountCreation: true,                                 //\n  //formValidationFeedback: true,                                      //\n  homeRoutePath: '/',                                                  // 16\n  //showAddRemoveServices: false,                                      //\n  //showPlaceholders: true,                                            //\n                                                                       //\n  negativeValidation: true,                                            // 20\n  positiveValidation: true,                                            // 21\n  negativeFeedback: false,                                             // 22\n  positiveFeedback: true                                               // 23\n                                                                       //\n});                                                                    //\n                                                                       //\n// Privacy Policy and Terms of Use                                     //\n//privacyUrl: 'privacy',                                               //\n//termsUrl: 'terms-of-use',                                            //\nvar pwd = AccountsTemplates.removeField('password');                   // 30\nAccountsTemplates.removeField('email');                                // 31\nAccountsTemplates.addFields([{                                         // 32\n  _id: \"username\",                                                     // 34\n  type: \"text\",                                                        // 35\n  displayName: \"username\",                                             // 36\n  required: true,                                                      // 37\n  minLength: 5                                                         // 38\n}, pwd]);                                                              //\n/////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n","servePath":"/lib/useraccount_config.js","sourceMap":{"version":3,"sources":["meteor://ðŸ’»app/lib/useraccount_config.js"],"names":[],"mappings":";;;;;;;;;;AAEA,iBAAiB,CAAC,SAAS,CAAC;;;AAG1B,qBAAmB,EAAE,IAAI;;;;;;;;;;AAUzB,eAAa,EAAE,GAAG;;;;AAIlB,oBAAkB,EAAE,IAAI;AACxB,oBAAkB,EAAE,IAAI;AACxB,kBAAgB,EAAE,KAAK;AACvB,kBAAgB,EAAE,IAAI;;CAKvB,CAAC,CAAC;;;;;AAEH,IAAI,GAAG,GAAG,iBAAiB,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;AACpD,iBAAiB,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;AACvC,iBAAiB,CAAC,SAAS,CAAC,CAC1B;AACI,KAAG,EAAE,UAAU;AACf,MAAI,EAAE,MAAM;AACZ,aAAW,EAAE,UAAU;AACvB,UAAQ,EAAE,IAAI;AACd,WAAS,EAAE,CAAC;CACf,EACD,GAAG,CACJ,CAAC,CAAC,gE","file":"/lib/useraccount_config.js","sourcesContent":["\n// Options\nAccountsTemplates.configure({\n  // defaultLayout: 'emptyLayout',\n  //showForgotPasswordLink: true,\n  overrideLoginErrors: true,\n  //enablePasswordChange: true,\n\n  // sendVerificationEmail: true,\n  // enforceEmailVerification: true,\n  //confirmPassword: true,\n  //continuousValidation: false,\n  //displayFormLabels: true,\n  //forbidClientAccountCreation: true,\n  //formValidationFeedback: true,\n  homeRoutePath: '/',\n  //showAddRemoveServices: false,\n  //showPlaceholders: true,\n\n  negativeValidation: true,\n  positiveValidation: true,\n  negativeFeedback: false,\n  positiveFeedback: true,\n\n  // Privacy Policy and Terms of Use\n  //privacyUrl: 'privacy',\n  //termsUrl: 'terms-of-use',\n});\n\nvar pwd = AccountsTemplates.removeField('password');\nAccountsTemplates.removeField('email');\nAccountsTemplates.addFields([\n  {\n      _id: \"username\",\n      type: \"text\",\n      displayName: \"username\",\n      required: true,\n      minLength: 5,\n  },\n  pwd\n]);"]}},{"type":"js","data":"(function(){\n\n/////////////////////////////////////////////////////////////////////////\n//                                                                     //\n// server/publications.js                                              //\n//                                                                     //\n/////////////////////////////////////////////////////////////////////////\n                                                                       //\n// Meteor.publish('groups',function(sortby,order){                     //\n// \tconsole.log(sortby,order);                                         //\n// \treturn Groups.find({},{sort:{sortby:order}});                      //\n// });                                                                 //\n                                                                       //\nMeteor.publish('groups', function () {                                 // 6\n\treturn Groups.find({});                                               // 7\n});                                                                    //\n                                                                       //\nMeteor.publish('myMessages', function (userId) {                       // 10\n\tconsole.log(\"here\");                                                  // 11\n});                                                                    //\n                                                                       //\nMeteor.publish('messages', function (group) {                          // 14\n\tconsole.log(\"publications **** \" + group);                            // 15\n                                                                       //\n\t// Messages.aggregate(                                                //\n\t// [{$project:                                                        //\n\t// \t{                                                                 //\n\t// \t\tlife:{$add: [\"$life\", [{ $multiply: [\"$votes\", (-15)*(60)*(1000)]} ] ]}\n\t// \t}                                                                 //\n\t// }                                                                  //\n\t// ]);                                                                //\n\tMessages.find().forEach(function (data) {                             // 24\n\t\t// console.log(maxLife - (Date.now()-data.timestamp));               //\n\t\tvar now = Date.now();                                                // 26\n\t\tvar maxLife = Groups.findOne({ _id: data.groupId }).msgTime;         // 27\n\t\tvar weight = maxLife / 2;                                            // 28\n\t\tconsole.log(maxLife, weight);                                        // 29\n\t\tMessages.update({ _id: data._id }, { $set: { life: maxLife - (now - data.timestamp) + weight * data.votes } });\n\t});                                                                   //\n                                                                       //\n\tMessages.remove({ life: { $lt: 0 } });                                // 33\n                                                                       //\n\treturn Messages.find({ groupId: group }, { life: { $gt: 0 } });       // 35\n});                                                                    //\n                                                                       //\n//Meteor.publish(\"allUsers\", function () {                             //\n//  return Meteor.users.find({});                                      //\n//});                                                                  //\n/////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n","servePath":"/server/publications.js","sourceMap":{"version":3,"sources":["/server/publications.js"],"names":[],"mappings":";;;;;;;;;;;;;AAKA,MAAM,CAAC,OAAO,CAAC,QAAQ,EAAE,YAAW;AACnC,QAAO,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;CACvB,CAAC,CAAC;;AAEH,MAAM,CAAC,OAAO,CAAC,YAAY,EAAE,UAAS,MAAM,EAAC;AAC5C,QAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;CACpB,CAAC,CAAC;;AAEH,MAAM,CAAC,OAAO,CAAC,UAAU,EAAE,UAAU,KAAK,EAAE;AAC3C,QAAO,CAAC,GAAG,CAAC,oBAAoB,GAAG,KAAK,CAAC,CAAC;;;;;;;;;AAS1C,SAAQ,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC,UAAU,IAAI,EAAE;;AAEvC,MAAI,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;AACrB,MAAI,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,EAAC,GAAG,EAAC,IAAI,CAAC,OAAO,EAAC,CAAC,CAAC,OAAO,CAAC;AACzD,MAAI,MAAM,GAAG,OAAO,GAAG,CAAC,CAAC;AACzB,SAAO,CAAC,GAAG,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;AAC7B,UAAQ,CAAC,MAAM,CAAC,EAAC,GAAG,EAAC,IAAI,CAAC,GAAG,EAAC,EAAE,EAAC,IAAI,EAAE,EAAC,IAAI,EAAE,OAAO,IAAI,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,MAAM,GAAG,IAAI,CAAC,KAAK,EAAC,EAAC,CAAC,CAAC;EACxG,CAAC,CAAC;;AAEH,SAAQ,CAAC,MAAM,CAAC,EAAC,IAAI,EAAE,EAAC,GAAG,EAAE,CAAC,EAAC,EAAC,CAAC,CAAC;;AAElC,QAAO,QAAQ,CAAC,IAAI,CAAC,EAAC,OAAO,EAAE,KAAK,EAAC,EAAE,EAAC,IAAI,EAAE,EAAC,GAAG,EAAE,CAAC,EAAC,EAAC,CAAC,CAAC;CACzD,CAAC,CAAC","file":"/server/publications.js","sourcesContent":["// Meteor.publish('groups',function(sortby,order){\n// \tconsole.log(sortby,order);\n// \treturn Groups.find({},{sort:{sortby:order}});\n// });\n\nMeteor.publish('groups', function() {\n\treturn Groups.find({});\n});\n\nMeteor.publish('myMessages', function(userId){\n\tconsole.log(\"here\");\n});\n\nMeteor.publish('messages', function (group) {\n\tconsole.log(\"publications **** \" + group);\n\n\t// Messages.aggregate(\n\t// [{$project:\n\t// \t{\n\t// \t\tlife:{$add: [\"$life\", [{ $multiply: [\"$votes\", (-15)*(60)*(1000)]} ] ]}\n\t// \t}\n\t// }\n\t// ]);\n\tMessages.find().forEach(function (data) {\n\t\t// console.log(maxLife - (Date.now()-data.timestamp));\n\t\tvar now = Date.now();\n\t\tvar maxLife = Groups.findOne({_id:data.groupId}).msgTime;\n\t\tvar weight = maxLife / 2;\n\t\tconsole.log(maxLife, weight);\n\t\tMessages.update({_id:data._id}, {$set: {life: maxLife - (now - data.timestamp) + weight * data.votes}});\n\t});\n\n\tMessages.remove({life: {$lt: 0}});\n\n\treturn Messages.find({groupId: group}, {life: {$gt: 0}});\n});\n\n//Meteor.publish(\"allUsers\", function () {\n//  return Meteor.users.find({});\n//});\n"]}},{"type":"js","data":"(function(){\n\n/////////////////////////////////////////////////////////////////////////\n//                                                                     //\n// server/serverSide.js                                                //\n//                                                                     //\n/////////////////////////////////////////////////////////////////////////\n                                                                       //\nif (Groups.find().count() == 0) {                                      // 1\n\tGroups.insert({ name: \"Public Group 1\", people: [], privateGroup: false, sprays: 0, msgTime: 5 * 60 * 1000 });\n\tGroups.insert({ name: \"Public Group 2\", people: [], privateGroup: false, sprays: 0, msgTime: 5 * 60 * 1000 });\n}                                                                      //\n                                                                       //\nMeteor.methods({                                                       // 6\n                                                                       //\n\taddCurrent: function (message) {                                      // 8\n\t\tGroups.update({ _id: message.groupId }, {                            // 9\n\t\t\t$set: { currentMessage: message.text }                              // 11\n\t\t});                                                                  //\n\t},                                                                    //\n                                                                       //\n\taddGroup: function (groupName, currentUser, isPrivate, msgTime) {     // 15\n\t\tvar groupId = Groups.insert({                                        // 18\n\t\t\tname: groupName,                                                    // 19\n\t\t\tpeople: [currentUser],                                              // 20\n\t\t\tcreatedBy: currentUser,                                             // 21\n\t\t\tprivateGroup: isPrivate,                                            // 22\n\t\t\tsprays: 0,                                                          // 23\n\t\t\ttimestamp: Date.now(),                                              // 24\n\t\t\tmsgTime: msgTime,                                                   // 25\n\t\t\tcurrentMessage: \"No messages yet\"                                   // 26\n\t\t});                                                                  //\n                                                                       //\n\t\treturn { _id: groupId };                                             // 29\n\t},                                                                    //\n                                                                       //\n\tdoesUserExist: function (userName) {                                  // 32\n\t\treturn Meteor.users.find({ username: userName }).count();            // 33\n\t},                                                                    //\n                                                                       //\n\tmessageSend: function (message) {                                     // 36\n\t\tvar maxLife = Groups.findOne({ _id: message.groupId }).msgTime;      // 37\n\t\tconsole.log(maxLife);                                                // 38\n\t\tvar newMsg = _.extend(message, {                                     // 39\n\t\t\tuderID: Meteor.user()._id,                                          // 40\n\t\t\tusername: Meteor.user().username,                                   // 41\n\t\t\tvotes: 0,                                                           // 42\n\t\t\tlife: maxLife,                                                      // 43\n\t\t\t// radius:linearScale(message.text.length()),                       //\n\t\t\tvoters: []                                                          // 45\n\t\t\t// groupName: Groups.find({_id:message.groupId})                    //\n\t\t});                                                                  //\n                                                                       //\n\t\tvar id = Messages.insert(newMsg);                                    // 49\n\t\tGroups.update({ _id: message.groupId }, {                            // 50\n\t\t\t$inc: { sprays: 1 }                                                 // 52\n\t\t});                                                                  //\n                                                                       //\n\t\treturn { _id: id };                                                  // 55\n\t},                                                                    //\n                                                                       //\n\tmessageVote: function (msgId, user) {                                 // 58\n\t\t// console.log(Messages.find({id:msgId}));                           //\n\t\t// var weight = (15)*(60)*(1000);                                    //\n\t\t// var maxLife = (5)*(60)*(1000);                                    //\n\t\tvar now = Date.now();                                                // 62\n\t\tconsole.log('messageVote');                                          // 63\n\t\tconsole.log(msgId);                                                  // 64\n\t\tvar username = user.username;                                        // 65\n\t\t// console.log()                                                     //\n\t\tif (Messages.find({ _id: msgId, voters: username }).count() === 0) {\n\t\t\tMessages.find({ _id: msgId }).forEach(function (data) {             // 68\n\t\t\t\tvar maxLife = Groups.findOne({ _id: data.groupId }).msgTime;       // 69\n\t\t\t\tconsole.log(\"vote \" + maxLife);                                    // 70\n\t\t\t\tvar weight = maxLife / 2;                                          // 71\n\t\t\t\tconsole.log(maxLife - (Date.now() - data.timestamp));              // 72\n\t\t\t\tvar now = Date.now();                                              // 73\n\t\t\t\tMessages.update({ _id: data._id }, {                               // 74\n\t\t\t\t\t$inc: { votes: 1 },                                               // 75\n\t\t\t\t\t$set: { life: maxLife - (now - data.timestamp) + weight * (data.votes + 1) },\n\t\t\t\t\t$push: { voters: username }                                       // 77\n\t\t\t\t});                                                                //\n\t\t\t});                                                                 //\n\t\t} else {                                                             //\n\t\t\tconsole.log(\"already\");                                             // 81\n\t\t\tMessages.find({ _id: msgId }).forEach(function (data) {             // 82\n\t\t\t\tvar now = Date.now();                                              // 83\n\t\t\t\tvar maxLife = Groups.findOne({ _id: data.groupId }).msgTime;       // 84\n\t\t\t\tconsole.log(\"vote \" + maxLife);                                    // 85\n\t\t\t\tvar weight = maxLife / 2;                                          // 86\n\t\t\t\tMessages.update({ _id: data._id }, {                               // 87\n\t\t\t\t\t$inc: { votes: -1 },                                              // 88\n\t\t\t\t\t$pull: { voters: username },                                      // 89\n\t\t\t\t\t$set: { life: maxLife - (now - data.timestamp) + weight * (data.votes - 1) }\n\t\t\t\t});                                                                //\n\t\t\t});                                                                 //\n\t\t}                                                                    //\n\t\t// console.log(Messages.find({id:msgId}));                           //\n\t}                                                                     //\n});                                                                    //\n                                                                       //\n// if (Messages.find().count() == 0){                                  //\n// \tMessages.insert({name: \"chris\",                                    //\n// \ttext: \"test\",                                                      //\n// \t});                                                                //\n// }                                                                   //\n// if (Messages.find().count() == 0){                                  //\n// \tvar message = {                                                    //\n// \t\t\ttext: \"root\",                                                    //\n// \t\t\ttimestamp: Date.now(),                                           //\n// \t\t\tgroupName: \"PublicGroup\",                                        //\n// \t\t\ttransparency: 1                                                  //\n// \t};                                                                 //\n// \tMessages.insert(message);                                          //\n// }                                                                   //\n//an attempt to change opacity dynamically                             //\n// var maxLife = 30000;                                                //\n// var interval = 5000;                                                //\n// Meteor.setInterval(function(){                                      //\n// \tMessages.updateMany({                                              //\n// \t\t{},                                                               //\n// \t\t{                                                                 //\n// \t\t\t$set:{life: 1}                                                   //\n// \t\t}                                                                 //\n// \t});                                                                //\n// \t// var timeNow = Date.now()                                        //\n// \t// var msgs = Messages.find().map(function(u){                     //\n// \t// \treturn Math.round(maxLife - ((timeNow - u.timestamp)/1000));   //\n// \t// });                                                             //\n// \t// console.log(msgs);                                              //\n// \t// Messages.update({},{life:msgs});                                //\n// \t// Messages.update({},{$set:{life: maxLife - ((timeNow - timestamp)/1000)}},{multi:true});\n// }, interval);                                                       //\n/////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n","servePath":"/server/serverSide.js","sourceMap":{"version":3,"sources":["meteor://ðŸ’»app/server/serverSide.js"],"names":[],"mappings":"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","file":"/server/serverSide.js","sourcesContent":["if (Groups.find().count() == 0) {\n\tGroups.insert({name: \"Public Group 1\", people: [], privateGroup: false, sprays: 0, msgTime: (5 * 60 * 1000)});\n\tGroups.insert({name: \"Public Group 2\", people: [], privateGroup: false, sprays: 0, msgTime: (5 * 60 * 1000)});\n}\n\nMeteor.methods({\n\n\taddCurrent: function(message){\n\t\tGroups.update({_id:message.groupId},\n\t\t{\n\t\t\t$set:{currentMessage:message.text}\n\t\t});\n\t},\n\n\taddGroup: function(groupName, currentUser, isPrivate, msgTime)\n\n\t{\t\t\n\t\tvar groupId = Groups.insert({\n\t\t\tname: groupName,\n\t\t\tpeople: [currentUser],\n\t\t\tcreatedBy: currentUser,\n\t\t\tprivateGroup: isPrivate,\n\t\t\tsprays:0,\n\t\t\ttimestamp: Date.now(),\n\t\t\tmsgTime: msgTime,\n\t\t\tcurrentMessage: \"No messages yet\"\n\t\t});\n\n\t\treturn {_id:groupId};\n\t},\n\n\tdoesUserExist: function (userName) {\n\t\treturn Meteor.users.find({username: userName}).count();\n\t},\n\n\tmessageSend: function (message){\n\t\tvar maxLife = Groups.findOne({_id:message.groupId}).msgTime;\n\t\tconsole.log(maxLife);\n\t\tvar newMsg = _.extend(message, {\n\t\t\tuderID: Meteor.user()._id,\n\t\t\tusername: Meteor.user().username,\n\t\t\tvotes:0,\n\t\t\tlife:maxLife,\n\t\t\t// radius:linearScale(message.text.length()),\n\t\t\tvoters:[]\n\t\t\t// groupName: Groups.find({_id:message.groupId})\n\t\t});\n\n\t\tvar id = Messages.insert(newMsg);\n\t\tGroups.update({_id: message.groupId},\n\t\t{\n\t\t\t$inc: {sprays: 1}\n\t\t});\n\n\t\treturn {_id: id};\n\t},\n\n\tmessageVote: function (msgId, user) {\n\t\t// console.log(Messages.find({id:msgId}));\n\t\t// var weight = (15)*(60)*(1000);\n\t\t// var maxLife = (5)*(60)*(1000);\n\t\tvar now = Date.now();\n\t\tconsole.log('messageVote');\n\t\tconsole.log(msgId);\n\t\tvar username = user.username;\n\t\t// console.log()\n\t\tif(Messages.find({_id: msgId,voters: username}).count() === 0) {\n\t\t\tMessages.find({_id: msgId}).forEach(function (data) {\n\t\t\t\tvar maxLife = Groups.findOne({_id: data.groupId}).msgTime;\n\t\t\t\tconsole.log(\"vote \" + maxLife);\n\t\t\t\tvar weight = maxLife / 2;\n\t\t\t\tconsole.log(maxLife - (Date.now() - data.timestamp));\n\t\t\t\tvar now = Date.now();\n\t\t\t\tMessages.update({_id: data._id}, {\n\t\t\t\t\t\t$inc: {votes: 1},\n\t\t\t\t\t\t$set: {life: maxLife - (now - data.timestamp) + weight * (data.votes + 1)},\n\t\t\t\t\t\t$push: {voters: username}\n\t\t\t\t});\n\t\t\t});\n\t\t} else {\n\t\t\tconsole.log(\"already\");\n\t\t\tMessages.find({_id: msgId}).forEach(function (data) {\n\t\t\t\tvar now = Date.now();\n\t\t\t\tvar maxLife = Groups.findOne({_id: data.groupId}).msgTime;\n\t\t\t\tconsole.log(\"vote \" + maxLife);\n\t\t\t\tvar weight = maxLife / 2;\n\t\t\t\tMessages.update({_id: data._id}, {\n\t\t\t\t\t\t$inc:{votes: -1},\n\t\t\t\t\t\t$pull:{voters: username},\n\t\t\t\t\t\t$set:{life: maxLife - (now - data.timestamp) + (weight * (data.votes - 1))}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\t// console.log(Messages.find({id:msgId}));\n\t}\n});\n\n// if (Messages.find().count() == 0){\n// \tMessages.insert({name: \"chris\",\n// \ttext: \"test\",\n// \t});\n// }\n// if (Messages.find().count() == 0){\n// \tvar message = {\n// \t\t\ttext: \"root\",\n// \t\t\ttimestamp: Date.now(),\n// \t\t\tgroupName: \"PublicGroup\",\n// \t\t\ttransparency: 1\n// \t}; \n// \tMessages.insert(message);\n// }\n//an attempt to change opacity dynamically\n// var maxLife = 30000;\n// var interval = 5000;\n// Meteor.setInterval(function(){\n// \tMessages.updateMany({\n// \t\t{},\n// \t\t{\n// \t\t\t$set:{life: 1}\n// \t\t}\n// \t});\n// \t// var timeNow = Date.now()\n// \t// var msgs = Messages.find().map(function(u){\n// \t// \treturn Math.round(maxLife - ((timeNow - u.timestamp)/1000));\n// \t// });\n// \t// console.log(msgs);\n// \t// Messages.update({},{life:msgs});\n// \t// Messages.update({},{$set:{life: maxLife - ((timeNow - timestamp)/1000)}},{multi:true});\n// }, interval);\n"]}}]