{"metadata":{"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}},"usedHelpers":[]},"ignored":false,"code":"Router.configure({\n  layoutTemplate: 'main',\n  loadingTemplate: 'loading',\n  notFoundTemplate: 'notFound',\n  yieldTemplates: {\n    nav: { to: 'nav' }\n  },\n  waitOn: function () {\n    console.log(\"subscribed\");\n    return [Meteor.subscribe('sprays', 'timestamp', -1), Meteor.subscribe('messages')];\n  }\n});\n\n//Router.route('/send',{name: 'messageSend'});\nRouter.map(function () {\n  this.route('home', { path: '/',\n\n    onBeforeAction: function () {\n      $('body').addClass('home');\n      this.next();\n    },\n\n    onStop: function () {\n      $('body').removeClass('home');\n    }\n\n  });\n  this.route('groupList', { path: '/groups' });\n});\n\nRouter.route('groups/:_id', {\n  name: 'groupPage',\n  data: function () {\n    return Groups.findOne(this.params._id);\n  }\n});\n\nvar requireLogin = function () {\n  if (!Meteor.user()) {\n    // If user is not logged in render landingpage\n    Router.go('/');\n  } else {\n    //if user is logged in render whatever route was requested\n    this.next();\n  }\n};\n\nvar goToGroups = function (pause) {\n  if (Meteor.userId()) {\n    Router.go('groupList');\n  } else {\n    Router.go('/');\n    this.next();\n  }\n};\n\nRouter.onBeforeAction(function () {\n  $('body').addClass('body-home');\n  this.next();\n});\nRouter.onBeforeAction(requireLogin, { except: 'home' });\nRouter.onBeforeAction(goToGroups, { only: ['home'] });\n\n// Router.onBeforeAction(function() {\n// \tvar user = Meteor.user().username;\n// \tvar currentGroupId = Router.current().params._id;\n//     if (Groups.find({_id: currentGroupId, people: {$in: [user]}}).count() === 0) {\n//     \tRouter.go('/');\n//     } else {\n//         this.next();\n//     }\n// }, {only : 'groupPage'});\n//Router.onBeforeAction('dataNotFound', {only: 'groupPage'});\n\n// Router.plugin('ensureSignedIn', {\n//   only: ['groupPage']\n// });\n\n// AccountsTemplates.configureRoute('enrollAccount');\n// AccountsTemplates.configureRoute('signIn');\n// AccountsTemplates.configureRoute('signUp');","ast":null,"map":{"version":3,"sources":["/lib/router.js"],"names":[],"mappings":"AAAA,MAAM,CAAC,SAAS,CAAC;AAChB,gBAAc,EAAE,MAAM;AACtB,iBAAe,EAAE,SAAS;AAC1B,kBAAgB,EAAE,UAAU;AAC5B,gBAAc,EAAE;AACT,OAAG,EAAE,EAAC,EAAE,EAAE,KAAK,EAAC;GACnB;AACJ,QAAM,EAAE,YAAU;AACjB,WAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;AAC1B,WAAO,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,EAAC,WAAW,EAAC,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC;GACjF;CACD,CAAC,CAAC;;;AAGH,MAAM,CAAC,GAAG,CAAC,YAAW;AACpB,MAAI,CAAC,KAAK,CAAC,MAAM,EAAE,EAAC,IAAI,EAAE,GAAG;;AAE9B,kBAAc,EAAE,YAAW;AACtB,OAAC,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;AAC3B,UAAI,CAAC,IAAI,EAAE,CAAC;KACb;;AAED,UAAM,EAAE,YAAW;AACjB,OAAC,CAAC,MAAM,CAAC,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;KAC/B;;GAEH,CAAC,CAAC;AACF,MAAI,CAAC,KAAK,CAAC,WAAW,EAAE,EAAC,IAAI,EAAE,SAAS,EAAC,CAAC,CAAC;CAC5C,CAAC,CAAC;;AAEH,MAAM,CAAC,KAAK,CAAC,aAAa,EAC1B;AACC,MAAI,EAAE,WAAW;AACjB,MAAI,EAAE,YAAW;AAChB,WAAO,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;GACvC;CACD,CAAC,CAAC;;AAEH,IAAI,YAAY,GAAG,YAAW;AAC7B,MAAI,CAAE,MAAM,CAAC,IAAI,EAAE,EAAE;;AAErB,UAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;GACb,MAAM;;AAEJ,QAAI,CAAC,IAAI,EAAE,CAAC;GACd;CACF,CAAA;;AAED,IAAI,UAAU,GAAG,UAAS,KAAK,EAAE;AAC/B,MAAI,MAAM,CAAC,MAAM,EAAE,EAAE;AACnB,UAAM,CAAC,EAAE,CAAC,WAAW,CAAC,CAAC;GACxB,MAAM;AACN,UAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;AACd,QAAI,CAAC,IAAI,EAAE,CAAC;GACb;CACF,CAAC;;AAEF,MAAM,CAAC,cAAc,CAAC,YAAW;AAC3B,GAAC,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;AAChC,MAAI,CAAC,IAAI,EAAE,CAAC;CACjB,CAAC,CAAC;AACH,MAAM,CAAC,cAAc,CAAC,YAAY,EAAC,EAAC,MAAM,EAAC,MAAM,EAAC,CAAC,CAAC;AACpD,MAAM,CAAC,cAAc,CAAC,UAAU,EAAE,EAAC,IAAI,EAAE,CAAC,MAAM,CAAC,EAAC,CAAC,CAAC","file":"/lib/router.js.map","sourcesContent":["Router.configure({\n\tlayoutTemplate: 'main',\n\tloadingTemplate: 'loading',\n\tnotFoundTemplate: 'notFound',\n\tyieldTemplates: {\n        nav: {to: 'nav'}\n    },\n\twaitOn: function(){\n\t\tconsole.log(\"subscribed\");\n\t\treturn [Meteor.subscribe('sprays','timestamp',-1), Meteor.subscribe('messages')];\n\t}\n});\n\n//Router.route('/send',{name: 'messageSend'});\nRouter.map(function() {\n  this.route('home', {path: '/',\n\n\tonBeforeAction: function() {\n      $('body').addClass('home');\n      this.next();\n    },\n\n    onStop: function() {\n      $('body').removeClass('home');\n    }\n\t\n\t});\n  this.route('groupList', {path: '/groups'});\n});\n\nRouter.route('groups/:_id',\n{\n\tname: 'groupPage',\n\tdata: function() {\n\t\treturn Groups.findOne(this.params._id);\n\t}\n});\n\nvar requireLogin = function() { \n\tif (! Meteor.user()) {\n   \t// If user is not logged in render landingpage\n\tRouter.go('/');\n \t} else {\n   \t//if user is logged in render whatever route was requested\n   \t\tthis.next(); \n \t}\n}\n\nvar goToGroups = function(pause) {\n  if (Meteor.userId()) {\n    Router.go('groupList');\n  } else {\n  \tRouter.go('/');\n    this.next();\n  }\n};\n\nRouter.onBeforeAction(function() {\n      $('body').addClass('body-home');\n      this.next();\n});\nRouter.onBeforeAction(requireLogin,{except:'home'});\nRouter.onBeforeAction(goToGroups, {only: ['home']});\n\n// Router.onBeforeAction(function() {\n// \tvar user = Meteor.user().username;\n// \tvar currentGroupId = Router.current().params._id;\n//     if (Groups.find({_id: currentGroupId, people: {$in: [user]}}).count() === 0) {\n//     \tRouter.go('/');\n//     } else {\n//         this.next();\n//     }\n// }, {only : 'groupPage'});\n//Router.onBeforeAction('dataNotFound', {only: 'groupPage'});\n\n\n\n// Router.plugin('ensureSignedIn', {\n//   only: ['groupPage']\n// });\n\n// AccountsTemplates.configureRoute('enrollAccount');\n// AccountsTemplates.configureRoute('signIn');\n// AccountsTemplates.configureRoute('signUp');\n"]},"hash":"16290f794bc78e699f12ab640c723771329cbb88"}
