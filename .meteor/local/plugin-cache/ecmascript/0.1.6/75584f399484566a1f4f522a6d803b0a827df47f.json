{"metadata":{"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}},"usedHelpers":[]},"ignored":false,"code":"// if (Messages.find().count() == 0){\n// \tMessages.insert({name: \"chris\",\n// \ttext: \"test\",\n// \t});\n// }\nif (Groups.find().count() == 0) {\n\tGroups.insert({ name: \"PublicGroup\", people: [] });\n\tGroups.insert({ name: \"SecondGroup\", people: [] });\n}\n\nMeteor.methods({\n\tdoesUserExist: function (userName) {\n\t\tconsole.log(\"doesUserExist is being called.\");\n\t\tconsole.log(\"The return for the method is \" + Meteor.users.find({ username: userName }).count());\n\t\treturn Meteor.users.find({ username: userName }).count();\n\t},\n\n\tmessageSend: function (message) {\n\t\tvar maxLife = 5 * 60 * 1000;\n\t\tvar newMsg = _.extend(message, {\n\t\t\tuderID: Meteor.user()._id,\n\t\t\tusername: Meteor.user().username,\n\t\t\tvotes: 0,\n\t\t\tlife: maxLife,\n\t\t\t// radius:linearScale(message.text.length()),\n\t\t\tvoters: []\n\t\t\t// groupName: Groups.find({_id:message.groupId})\n\t\t});\n\t\tvar id = Messages.insert(newMsg);\n\t\treturn { _id: id };\n\t},\n\n\tmessageVote: function (msgId, user) {\n\t\t// console.log(Messages.find({id:msgId}));\n\t\tvar username = user.username;\n\t\tvar weight = 15 * 60 * 1000;\n\t\tvar maxLife = 5 * 60 * 1000;\n\t\tvar now = Date.now();\n\t\tconsole.log('messageVote');\n\t\tconsole.log(msgId);\n\t\t// console.log()\n\t\tif (Messages.find({ voters: { $in: username } }).count === 0) {\n\t\t\tconsole.log(\"not voted\");\n\t\t\tMessages.update({ _id: data._id }, {\n\t\t\t\t$push: { voters: username }\n\t\t\t});\n\t\t}\n\t\t// console.log(Messages.find({id:msgId}));\n\t}\n});\n// if (Messages.find().count() == 0){\n// \tvar message = {\n// \t\t\ttext: \"root\",\n// \t\t\ttimestamp: Date.now(),\n// \t\t\tgroupName: \"PublicGroup\",\n// \t\t\ttransparency: 1\n// \t};\n// \tMessages.insert(message);\n// }\n//an attempt to change opacity dynamically\n// var maxLife = 30000;\n// var interval = 5000;\n// Meteor.setInterval(function(){\n// \tMessages.updateMany({\n// \t\t{},\n// \t\t{\n// \t\t\t$set:{life: 1}\n// \t\t}\n// \t});\n// \t// var timeNow = Date.now()\n// \t// var msgs = Messages.find().map(function(u){\n// \t// \treturn Math.round(maxLife - ((timeNow - u.timestamp)/1000));\n// \t// });\n// \t// console.log(msgs);\n// \t// Messages.update({},{life:msgs});\n// \t// Messages.update({},{$set:{life: maxLife - ((timeNow - timestamp)/1000)}},{multi:true});\n// }, interval);","ast":null,"map":{"version":3,"sources":["/server/serverSide.js"],"names":[],"mappings":";;;;;AAKA,IAAI,MAAM,CAAC,IAAI,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAC;AAC9B,OAAM,CAAC,MAAM,CAAC,EAAC,IAAI,EAAE,aAAa,EAAE,MAAM,EAAE,EAAE,EAAC,CAAC,CAAC;AACjD,OAAM,CAAC,MAAM,CAAC,EAAC,IAAI,EAAE,aAAa,EAAE,MAAM,EAAE,EAAE,EAAC,CAAC,CAAC;CACjD;;AAED,MAAM,CAAC,OAAO,CAAC;AACd,cAAa,EAAE,UAAU,QAAQ,EAAE;AAClC,SAAO,CAAC,GAAG,CAAC,gCAAgC,CAAC,CAAC;AAC9C,SAAO,CAAC,GAAG,CAAC,+BAA+B,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,EAAC,QAAQ,EAAE,QAAQ,EAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC;AAC/F,SAAO,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,EAAC,QAAQ,EAAE,QAAQ,EAAC,CAAC,CAAC,KAAK,EAAE,CAAC;EACvD;;AAED,YAAW,EAAE,UAAS,OAAO,EAAC;AAC7B,MAAI,OAAO,GAAG,AAAC,CAAC,GAAG,EAAE,AAAC,GAAE,IAAI,AAAC,CAAC;AAC9B,MAAI,MAAM,GAAG,CAAC,CAAC,MAAM,CAAC,OAAO,EAAC;AAC7B,SAAM,EAAE,MAAM,CAAC,IAAI,EAAE,CAAC,GAAG;AACzB,WAAQ,EAAE,MAAM,CAAC,IAAI,EAAE,CAAC,QAAQ;AAChC,QAAK,EAAC,CAAC;AACP,OAAI,EAAC,OAAO;;AAEZ,SAAM,EAAC,EAAE;;GAET,CAAC,CAAC;AACH,MAAI,EAAE,GAAG,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;AACjC,SAAO,EAAC,GAAG,EAAE,EAAE,EAAC,CAAC;EACjB;;AAED,YAAW,EAAE,UAAS,KAAK,EAAC,IAAI,EAAC;;AAEhC,MAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAA;AAC5B,MAAI,MAAM,GAAG,AAAC,EAAE,GAAG,EAAE,AAAC,GAAE,IAAI,AAAC,CAAC;AAC9B,MAAI,OAAO,GAAG,AAAC,CAAC,GAAG,EAAE,AAAC,GAAE,IAAI,AAAC,CAAC;AAC9B,MAAI,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;AACrB,SAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;AAC3B,SAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;;AAEnB,MAAG,QAAQ,CAAC,IAAI,CAAC,EAAC,MAAM,EAAC,EAAC,GAAG,EAAC,QAAQ,EAAC,EAAC,CAAC,CAAC,KAAK,KAAG,CAAC,EAAC;AACnD,UAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;AACzB,WAAQ,CAAC,MAAM,CAAC,EAAC,GAAG,EAAC,IAAI,CAAC,GAAG,EAAC,EAC9B;AACC,SAAK,EAAC,EAAC,MAAM,EAAC,QAAQ,EAAC;IACvB,CAAC,CAAC;GACH;;EAED;CACD,CAAC,CAAC","file":"/server/serverSide.js.map","sourcesContent":["// if (Messages.find().count() == 0){\n// \tMessages.insert({name: \"chris\",\n// \ttext: \"test\",\n// \t});\n// }\nif (Groups.find().count() == 0){\n\tGroups.insert({name: \"PublicGroup\", people: []});\n\tGroups.insert({name: \"SecondGroup\", people: []});\n}\n\nMeteor.methods({\n\tdoesUserExist: function (userName) {\n\t\tconsole.log(\"doesUserExist is being called.\");\n\t\tconsole.log(\"The return for the method is \" + Meteor.users.find({username: userName}).count());\n\t\treturn Meteor.users.find({username: userName}).count();\n\t},\n\n\tmessageSend: function(message){\n\t\tvar maxLife = (5)*(60)*(1000);\n\t\tvar newMsg = _.extend(message,{\n\t\t\tuderID: Meteor.user()._id,\n\t\t\tusername: Meteor.user().username,\n\t\t\tvotes:0,\n\t\t\tlife:maxLife,\n\t\t\t// radius:linearScale(message.text.length()),\n\t\t\tvoters:[]\n\t\t\t// groupName: Groups.find({_id:message.groupId})\n\t\t});\n\t\tvar id = Messages.insert(newMsg);\n\t\treturn {_id: id};\n\t},\n\n\tmessageVote: function(msgId,user){\n\t\t// console.log(Messages.find({id:msgId}));\n\t\tvar username = user.username\n\t\tvar weight = (15)*(60)*(1000);\n\t\tvar maxLife = (5)*(60)*(1000);\n\t\tvar now = Date.now();\n\t\tconsole.log('messageVote');\n\t\tconsole.log(msgId);\n\t\t// console.log()\n\t\tif(Messages.find({voters:{$in:username}}).count===0){\n\t\t\tconsole.log(\"not voted\");\n\t\t\tMessages.update({_id:data._id},\n\t\t\t{\n\t\t\t\t$push:{voters:username}\n\t\t\t});\n\t\t}\n\t\t// console.log(Messages.find({id:msgId}));\n\t}\n});\n// if (Messages.find().count() == 0){\n// \tvar message = {\n// \t\t\ttext: \"root\",\n// \t\t\ttimestamp: Date.now(),\n// \t\t\tgroupName: \"PublicGroup\",\n// \t\t\ttransparency: 1\n// \t}; \n// \tMessages.insert(message);\n// }\n//an attempt to change opacity dynamically\n// var maxLife = 30000;\n// var interval = 5000;\n// Meteor.setInterval(function(){\n// \tMessages.updateMany({\n// \t\t{},\n// \t\t{\n// \t\t\t$set:{life: 1}\n// \t\t}\n// \t});\n// \t// var timeNow = Date.now()\n// \t// var msgs = Messages.find().map(function(u){\n// \t// \treturn Math.round(maxLife - ((timeNow - u.timestamp)/1000));\n// \t// });\n// \t// console.log(msgs);\n// \t// Messages.update({},{life:msgs});\n// \t// Messages.update({},{$set:{life: maxLife - ((timeNow - timestamp)/1000)}},{multi:true});\n// }, interval);\n"]},"hash":"75584f399484566a1f4f522a6d803b0a827df47f"}
