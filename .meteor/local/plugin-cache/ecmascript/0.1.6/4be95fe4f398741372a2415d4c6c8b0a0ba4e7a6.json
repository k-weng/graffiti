{"metadata":{"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}},"usedHelpers":[]},"ignored":false,"code":"// if (Messages.find().count() == 0){\n// \tMessages.insert({name: \"chris\",\n// \ttext: \"test\",\n// \t});\n// }\nif (Groups.find().count() == 0) {\n\tGroups.insert({ name: \"PublicGroup\", people: [] });\n\tGroups.insert({ name: \"SecondGroup\", people: [] });\n}\n\nMeteor.methods({\n\tdoesUserExist: function (userName) {\n\t\t// console.log(Meteor.users.find().fetch());\n\t\t// console.log(Meteor.users.find({username: userName}).count());\n\t\t// console.log(userName);\n\t\treturn Meteor.users.find({ username: userName }).count();\n\t},\n\n\tmessageVote: function (msgId) {\n\t\t// console.log(Messages.find({id:msgId}));\n\t\tconsole.log('messageVote');\n\t\tconsole.log(msgId);\n\t\t// console.log()\n\t\tMessages.update({ _id: msgId }, { $inc: { votes: 1 } });\n\t\tvar now = Date.now();\n\t\tvar weight = -15 * 60 * 1000;\n\t\tvar maxLife = 1 * 5 * 1000;\n\t\tvar timestamp = Messages.find({ _id: msgId }, { timestamp: 1, _id: 0 });\n\t\tvar votes = Messages.find({ _id: msgId }, { votes: 1, _id: 0 });;\n\t\tconsole.log(\"votes ****** \" + votes.votes);\n\t\tMessages.update({ _id: msgId }, { $set: { life: maxLife - (now - timestamp) + weight * votes }\n\t\t});\n\t\t// console.log(Messages.find({id:msgId}));\n\t}\n});\n// if (Messages.find().count() == 0){\n// \tvar message = {\n// \t\t\ttext: \"root\",\n// \t\t\ttimestamp: Date.now(),\n// \t\t\tgroupName: \"PublicGroup\",\n// \t\t\ttransparency: 1\n// \t};\n// \tMessages.insert(message);\n// }\n//an attempt to change opacity dynamically\n// var maxLife = 30000;\n// var interval = 5000;\n// Meteor.setInterval(function(){\n// \tMessages.updateMany({\n// \t\t{},\n// \t\t{\n// \t\t\t$set:{life: 1}\n// \t\t}\n// \t});\n// \t// var timeNow = Date.now()\n// \t// var msgs = Messages.find().map(function(u){\n// \t// \treturn Math.round(maxLife - ((timeNow - u.timestamp)/1000));\n// \t// });\n// \t// console.log(msgs);\n// \t// Messages.update({},{life:msgs});\n// \t// Messages.update({},{$set:{life: maxLife - ((timeNow - timestamp)/1000)}},{multi:true});\n// }, interval);","ast":null,"map":{"version":3,"sources":["/server/serverSide.js"],"names":[],"mappings":";;;;;AAKA,IAAI,MAAM,CAAC,IAAI,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAC;AAC9B,OAAM,CAAC,MAAM,CAAC,EAAC,IAAI,EAAE,aAAa,EAAE,MAAM,EAAE,EAAE,EAAC,CAAC,CAAC;AACjD,OAAM,CAAC,MAAM,CAAC,EAAC,IAAI,EAAE,aAAa,EAAE,MAAM,EAAE,EAAE,EAAC,CAAC,CAAC;CACjD;;AAED,MAAM,CAAC,OAAO,CAAC;AACd,cAAa,EAAE,UAAU,QAAQ,EAAE;;;;AAIlC,SAAO,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,EAAC,QAAQ,EAAE,QAAQ,EAAC,CAAC,CAAC,KAAK,EAAE,CAAC;EACvD;;AAED,YAAW,EAAE,UAAS,KAAK,EAAC;;AAE3B,SAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;AAC3B,SAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;;AAEnB,UAAQ,CAAC,MAAM,CAAC,EAAC,GAAG,EAAC,KAAK,EAAC,EAAC,EAAC,IAAI,EAAC,EAAC,KAAK,EAAC,CAAC,EAAC,EAAC,CAAC,CAAC;AAC9C,MAAI,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAA;AACpB,MAAI,MAAM,GAAG,AAAC,CAAC,EAAE,GAAG,EAAE,AAAC,GAAE,IAAI,AAAC,CAAC;AAC/B,MAAI,OAAO,GAAG,AAAC,CAAC,GAAG,CAAC,AAAC,GAAE,IAAI,AAAC,CAAC;AAC7B,MAAI,SAAS,GAAG,QAAQ,CAAC,IAAI,CAAC,EAAC,GAAG,EAAC,KAAK,EAAC,EAAC,EAAC,SAAS,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,CAAC;AAC/D,MAAI,KAAK,GAAG,QAAQ,CAAC,IAAI,CAAC,EAAC,GAAG,EAAC,KAAK,EAAC,EAAC,EAAC,KAAK,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,CAAC,CAAC;AACxD,SAAO,CAAC,GAAG,CAAC,eAAe,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC;AAC3C,UAAQ,CAAC,MAAM,CAAC,EAAC,GAAG,EAAC,KAAK,EAAC,EAC1B,EAAC,IAAI,EAAC,EAAC,IAAI,EAAE,OAAO,IAAI,GAAG,GAAG,SAAS,CAAA,AAAC,GAAG,MAAM,GAAC,KAAK,EAAE;GACzD,CAAC,CAAC;;EAEH;CACD,CAAC,CAAC","file":"/server/serverSide.js.map","sourcesContent":["// if (Messages.find().count() == 0){\n// \tMessages.insert({name: \"chris\",\n// \ttext: \"test\",\n// \t});\n// }\nif (Groups.find().count() == 0){\n\tGroups.insert({name: \"PublicGroup\", people: []});\n\tGroups.insert({name: \"SecondGroup\", people: []});\n}\n\nMeteor.methods({\n\tdoesUserExist: function (userName) {\n\t\t// console.log(Meteor.users.find().fetch());\n\t\t// console.log(Meteor.users.find({username: userName}).count());\n\t\t// console.log(userName);\n\t\treturn Meteor.users.find({username: userName}).count();\n\t},\n\n\tmessageVote: function(msgId){\n\t\t// console.log(Messages.find({id:msgId}));\n\t\tconsole.log('messageVote');\n\t\tconsole.log(msgId);\n\t\t// console.log()\n\t\tMessages.update({_id:msgId},{$inc:{votes:1}});\n\t\tvar now = Date.now()\n\t\tvar weight = (-15)*(60)*(1000);\n\t\tvar maxLife = (1)*(5)*(1000);\n\t\tvar timestamp = Messages.find({_id:msgId},{timestamp:1,_id:0});\n\t\tvar votes = Messages.find({_id:msgId},{votes:1,_id:0});;\n\t\tconsole.log(\"votes ****** \" + votes.votes);\n\t\tMessages.update({_id:msgId},\n\t\t\t{$set:{life: maxLife - (now - timestamp) + weight*votes }\n\t\t});\n\t\t// console.log(Messages.find({id:msgId}));\n\t}\n});\n// if (Messages.find().count() == 0){\n// \tvar message = {\n// \t\t\ttext: \"root\",\n// \t\t\ttimestamp: Date.now(),\n// \t\t\tgroupName: \"PublicGroup\",\n// \t\t\ttransparency: 1\n// \t}; \n// \tMessages.insert(message);\n// }\n//an attempt to change opacity dynamically\n// var maxLife = 30000;\n// var interval = 5000;\n// Meteor.setInterval(function(){\n// \tMessages.updateMany({\n// \t\t{},\n// \t\t{\n// \t\t\t$set:{life: 1}\n// \t\t}\n// \t});\n// \t// var timeNow = Date.now()\n// \t// var msgs = Messages.find().map(function(u){\n// \t// \treturn Math.round(maxLife - ((timeNow - u.timestamp)/1000));\n// \t// });\n// \t// console.log(msgs);\n// \t// Messages.update({},{life:msgs});\n// \t// Messages.update({},{$set:{life: maxLife - ((timeNow - timestamp)/1000)}},{multi:true});\n// }, interval);\n"]},"hash":"4be95fe4f398741372a2415d4c6c8b0a0ba4e7a6"}
