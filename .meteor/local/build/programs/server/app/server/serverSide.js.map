{"version":3,"sources":["meteor://ðŸ’»app/server/serverSide.js"],"names":[],"mappings":"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","file":"/server/serverSide.js","sourcesContent":["Meteor.methods({\n\n\taddCurrent: function(message){\n\t\tGroups.update({_id:message.groupId},\n\t\t{\n\t\t\t$set:{currentMessage:message.text}\n\t\t});\n\t},\n\n\taddGroup: function(groupName, currentUser, isPrivate, msgTime)\n\n\t{\t\t\n\t\tvar groupId = Groups.insert({\n\t\t\tname: groupName,\n\t\t\tpeople: [currentUser],\n\t\t\tcreatedBy: currentUser,\n\t\t\tprivateGroup: isPrivate,\n\t\t\tsprays:0,\n\t\t\ttimestamp: Date.now(),\n\t\t\tmsgTime: msgTime,\n\t\t\tcurrentMessage: \"No messages yet\"\n\t\t});\n\n\t\treturn {_id:groupId};\n\t},\n\n\tdoesUserExist: function (userName) {\n\t\treturn Meteor.users.find({username: userName}).count();\n\t},\n\n\tmessageSend: function (message){\n\t\tvar maxLife = Groups.findOne({_id:message.groupId}).msgTime;\n\t\tconsole.log(maxLife);\n\t\tvar newMsg = _.extend(message, {\n\t\t\tuderID: Meteor.user()._id,\n\t\t\tusername: Meteor.user().username,\n\t\t\tvotes:0,\n\t\t\tlife:maxLife,\n\t\t\t// radius:linearScale(message.text.length()),\n\t\t\tvoters:[]\n\t\t\t// groupName: Groups.find({_id:message.groupId})\n\t\t});\n\n\t\tvar id = Messages.insert(newMsg);\n\t\tGroups.update({_id: message.groupId},\n\t\t{\n\t\t\t$inc: {sprays: 1}\n\t\t});\n\n\t\treturn {_id: id};\n\t},\n\n\tmessageVote: function (msgId, user) {\n\t\t// console.log(Messages.find({id:msgId}));\n\t\t// var weight = (15)*(60)*(1000);\n\t\t// var maxLife = (5)*(60)*(1000);\n\t\tvar now = Date.now();\n\t\tconsole.log('messageVote');\n\t\tconsole.log(msgId);\n\t\tvar username = user.username;\n\t\t// console.log()\n\t\tif(Messages.find({_id: msgId,voters: username}).count() === 0) {\n\t\t\tMessages.find({_id: msgId}).forEach(function (data) {\n\t\t\t\tvar maxLife = Groups.findOne({_id: data.groupId}).msgTime;\n\t\t\t\tconsole.log(\"vote \" + maxLife);\n\t\t\t\tvar weight = maxLife / 2;\n\t\t\t\tconsole.log(maxLife - (Date.now() - data.timestamp));\n\t\t\t\tvar now = Date.now();\n\t\t\t\tMessages.update({_id: data._id}, {\n\t\t\t\t\t\t$inc: {votes: 1},\n\t\t\t\t\t\t$set: {life: maxLife - (now - data.timestamp) + weight * (data.votes + 1)},\n\t\t\t\t\t\t$push: {voters: username}\n\t\t\t\t});\n\t\t\t});\n\t\t} else {\n\t\t\tconsole.log(\"already\");\n\t\t\tMessages.find({_id: msgId}).forEach(function (data) {\n\t\t\t\tvar now = Date.now();\n\t\t\t\tvar maxLife = Groups.findOne({_id: data.groupId}).msgTime;\n\t\t\t\tconsole.log(\"vote \" + maxLife);\n\t\t\t\tvar weight = maxLife / 2;\n\t\t\t\tMessages.update({_id: data._id}, {\n\t\t\t\t\t\t$inc:{votes: -1},\n\t\t\t\t\t\t$pull:{voters: username},\n\t\t\t\t\t\t$set:{life: maxLife - (now - data.timestamp) + (weight * (data.votes - 1))}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\t// console.log(Messages.find({id:msgId}));\n\t}\n});\n\n// if (Messages.find().count() == 0){\n// \tMessages.insert({name: \"chris\",\n// \ttext: \"test\",\n// \t});\n// }\n// if (Messages.find().count() == 0){\n// \tvar message = {\n// \t\t\ttext: \"root\",\n// \t\t\ttimestamp: Date.now(),\n// \t\t\tgroupName: \"PublicGroup\",\n// \t\t\ttransparency: 1\n// \t}; \n// \tMessages.insert(message);\n// }\n//an attempt to change opacity dynamically\n// var maxLife = 30000;\n// var interval = 5000;\n// Meteor.setInterval(function(){\n// \tMessages.updateMany({\n// \t\t{},\n// \t\t{\n// \t\t\t$set:{life: 1}\n// \t\t}\n// \t});\n// \t// var timeNow = Date.now()\n// \t// var msgs = Messages.find().map(function(u){\n// \t// \treturn Math.round(maxLife - ((timeNow - u.timestamp)/1000));\n// \t// });\n// \t// console.log(msgs);\n// \t// Messages.update({},{life:msgs});\n// \t// Messages.update({},{$set:{life: maxLife - ((timeNow - timestamp)/1000)}},{multi:true});\n// }, interval);\n"]}